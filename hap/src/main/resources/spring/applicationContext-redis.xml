<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd

        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <!-- Root Context: defines shared resources visible to all other web components -->

    <!-- 引入dbconfig.properties属性文件 -->
    <context:property-placeholder location="classpath:config.properties"/>


    <bean id="objectMapper" class="com.fasterxml.jackson.databind.ObjectMapper">
    </bean>

    <!--<bean id="redisSentinelConfiguration"-->
          <!--class="org.springframework.data.redis.connection.RedisSentinelConfiguration">-->
        <!--<property name="master">-->
            <!--<bean class="org.springframework.data.redis.connection.RedisNode">-->
                <!--<property name="name" value="mymaster"/>-->
            <!--</bean>-->
        <!--</property>-->
        <!--<property name="sentinels">-->
            <!--<set>-->
                <!--<bean class="org.springframework.data.redis.connection.RedisNode">-->
                    <!--<constructor-arg name="host" value="${redis.node1.ip}"/>-->
                    <!--<constructor-arg name="port" value="${redis.node1.sentinels.port}"/>-->
                <!--</bean>-->
                <!--&lt;!&ndash;<bean class="org.springframework.data.redis.connection.RedisNode">&ndash;&gt;-->
                    <!--&lt;!&ndash;<constructor-arg name="host" value="${redis.node2.ip}"/>&ndash;&gt;-->
                    <!--&lt;!&ndash;<constructor-arg name="port" value="${redis.node2.sentinels.port}"/>&ndash;&gt;-->
                <!--&lt;!&ndash;</bean>&ndash;&gt;-->
                <!--&lt;!&ndash;<bean class="org.springframework.data.redis.connection.RedisNode">&ndash;&gt;-->
                    <!--&lt;!&ndash;<constructor-arg name="host" value="${redis.node3.ip}"/>&ndash;&gt;-->
                    <!--&lt;!&ndash;<constructor-arg name="port" value="${redis.node3.sentinels.port}"/>&ndash;&gt;-->
                <!--&lt;!&ndash;</bean>&ndash;&gt;-->
                <!--&lt;!&ndash;<bean class="org.springframework.data.redis.connection.RedisNode">&ndash;&gt;-->
                    <!--&lt;!&ndash;<constructor-arg name="host" value="${redis.node4.ip}"/>&ndash;&gt;-->
                    <!--&lt;!&ndash;<constructor-arg name="port" value="${redis.node4.sentinels.port}"/>&ndash;&gt;-->
                <!--&lt;!&ndash;</bean>&ndash;&gt;-->
            <!--</set>-->
        <!--</property>-->
    <!--</bean>-->

    <!--这里添加的是Redis，因为使用的是Spring里自带的Redis的Session策略 -->
    <bean id="v2redisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <!--注释<constructor-arg ref="redisSentinelConfiguration"/>-->
         <property name="hostName" value="${redis.ip}"/>
        <property name="port" value="${redis.port}"/>
        <property name="usePool" value="true"/>
        <property name="database" value="${redis.db}"/>
        <property name="poolConfig">
            <bean class="redis.clients.jedis.JedisPoolConfig">
                <property name="maxIdle" value="999"/>
                <property name="maxTotal" value="9999"/>
                <property name="minIdle" value="20"/>
            </bean>
        </property>
    </bean>

    <bean id="stringRedisSerializer"
          class="org.springframework.data.redis.serializer.StringRedisSerializer"/>

    <bean id="v2redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="v2redisConnectionFactory"/>
        <property name="keySerializer" ref="stringRedisSerializer"/>
        <property name="valueSerializer" ref="stringRedisSerializer"/>
        <property name="hashKeySerializer" ref="stringRedisSerializer"/>
        <property name="hashValueSerializer" ref="stringRedisSerializer"/>
    </bean>
    <!-- 这里的是为了下面的 Session策略过滤器提供构造函数传入的参数，因为Session过滤器要依赖该对象来构造，所以创建一个先 -->
    <bean name="redisOperationsSessionRepository"
          class="org.springframework.session.data.redis.RedisOperationsSessionRepository">
        <constructor-arg ref="v2redisConnectionFactory"></constructor-arg>
        <property name="defaultMaxInactiveInterval" value="5400"/>
    </bean>

    <!-- 这个是Session策略过滤器，即将容器原有的Session持久化机制，代替为Spring的 Redis持久化Session机制。 -->
    <!-- 注意，这个名字与 web.xml里的targetBean的下value是要一致的。 -->
    <bean name="springSession" class="org.springframework.session.web.http.SessionRepositoryFilter">
        <constructor-arg ref="redisOperationsSessionRepository"/>
        <!--<property name="httpSessionStrategy"  ref="cookieHttpSessionStrategy"/>-->
        <property name="httpSessionStrategy"  ref="cookieHttpSessionStrategy"/>
    </bean>

    <bean id="cookieHttpSessionStrategy" class="org.springframework.session.web.http.CookieHttpSessionStrategy">

    </bean>


    <bean id="promptCache" class="com.lkkhpg.dsis.platform.cache.impl.HashStringRedisCache">
        <property name="name" value="prompt"/>
        <property name="type" value="java.lang.String"/>
        <property name="keyField" value="promptCode,lang"/>
        <property name="valueField" value="description"/>
        <property name="loadOnStartUp" value="true"/>
        <property name="sqlId" value="com.lkkhpg.dsis.platform.mapper.system.PromptMapper.selectAll"/>
    </bean>
    <bean id="languageCache" class="com.lkkhpg.dsis.platform.cache.impl.HashStringRedisCache">
        <property name="name" value="language"/>
        <property name="type" value="com.lkkhpg.dsis.platform.dto.system.Language"/>
        <property name="keyField" value="langCode"/>
        <property name="loadOnStartUp" value="true"/>
        <property name="sqlId" value="com.lkkhpg.dsis.platform.mapper.system.LanguageMapper.selectAll"/>
    </bean>
    <bean id="auditCache" class="com.lkkhpg.dsis.platform.cache.impl.HashStringRedisCache">
        <property name="name" value="audit"/>
        <property name="type" value="java.lang.String"/>
        <property name="keyField" value="entityCode"/>
        <property name="valueField" value="auditFlag"/>
        <property name="loadOnStartUp" value="true"/>
        <property name="sqlId" value="com.lkkhpg.dsis.platform.audit.mapper.AuditMapper.selectAuditEntityAll"/>
    </bean>

    <bean id="functionCache" class="com.lkkhpg.dsis.platform.cache.impl.HashStringRedisCacheGroup">
        <property name="name" value="function"/>
        <property name="type" value="com.lkkhpg.dsis.platform.dto.system.Function"/>
        <property name="groupField" value="lang"/>
        <property name="keyField" value="functionId"/>
        <property name="loadOnStartUp" value="true"/>
        <property name="sqlId" value="com.lkkhpg.dsis.platform.mapper.system.FunctionMapper.selectForCache"/>
    </bean>
    <bean id="roleFunctionCache" class="com.lkkhpg.dsis.platform.cache.impl.RoleFunctionCache">
        <property name="name" value="role_function"/>
    </bean>
    <bean id="roleResourceCache" class="com.lkkhpg.dsis.platform.cache.impl.RoleResourceCache">
        <property name="name" value="role_resource"/>
    </bean>
    <bean id="lovCache" class="com.lkkhpg.dsis.platform.cache.impl.LovCache">
        <property name="name" value="lov"/>
    </bean>
    <bean id="codeCache" class="com.lkkhpg.dsis.platform.cache.impl.SysCodeCache">
        <property name="name" value="code"/>
    </bean>

    <bean id="cacheManager" class="com.lkkhpg.dsis.platform.cache.impl.CacheManagerImpl">
        <property name="caches">
            <list>
                <!--<bean class="RedisCache">-->
                <!--<property name="name" value="user"/>-->
                <!--<property name="type" value="com.lkkhpg.dsis.platform.dto.system.User"/>-->
                <!--<property name="keyField" value="userName"/>-->
                <!--<property name="loadOnStartUp" value="true"/>-->
                <!--<property name="sqlId" value="com.lkkhpg.dsis.platform.mapper.system.UserMapper.queryAll"/>-->
                <!--</bean>-->
                <ref bean="languageCache"/>
                <ref bean="auditCache"/>
                <ref bean="promptCache"/>
                <ref bean="functionCache"/>
                <ref bean="roleFunctionCache"/>
                <ref bean="roleResourceCache"/>
                <ref bean="lovCache"/>
                <ref bean="codeCache"/>
                <!-- <bean class="HashStringRedisCache">
                    <property name="name" value="sys_menu"/>
                    <property name="type" value="MenuItem"/>
                    <property name="listener">
                        <bean class="MenuCacheListener"/>
                    </property>
                </bean> -->


                <bean class="com.lkkhpg.dsis.platform.cache.impl.RedisCache">
                    <property name="name" value="resource_url"/>
                    <property name="type" value="com.lkkhpg.dsis.platform.dto.system.Resource"/>
                    <property name="keyField" value="url"/>
                    <property name="loadOnStartUp" value="true"/>
                    <property name="sqlId" value="com.lkkhpg.dsis.platform.mapper.system.ResourceMapper.selectAll"/>
                </bean>
                <bean class="com.lkkhpg.dsis.platform.cache.impl.RedisCache">
                    <property name="name" value="resource_id"/>
                    <property name="type" value="com.lkkhpg.dsis.platform.dto.system.Resource"/>
                    <property name="keyField" value="resourceId"/>
                    <property name="loadOnStartUp" value="true"/>
                    <property name="sqlId" value="com.lkkhpg.dsis.platform.mapper.system.ResourceMapper.selectAll"/>
                </bean>
                <!--  <bean class="SysVpdCache">
                     <property name="name" value="vpd"/>
                 </bean> -->
            </list>
        </property>
    </bean>
    <bean id="languageProvider" class="com.lkkhpg.dsis.platform.core.impl.CacheBasedLanguageProvider">
        <property name="cacheName" value="language"/>
    </bean>

    <bean id="cacheReloadProcessor" class="com.lkkhpg.dsis.platform.cache.impl.CacheReloadProcessor">
        <property name="queue" value="queue:cache:reload"/>
        <property name="publishMessageTo" value="topic:cache:reloaded"/>
    </bean>

</beans>