<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lkkhpg.dsis.common.member.mapper.MemberMapper">
    <resultMap id="BaseResultMap" type="com.lkkhpg.dsis.common.member.dto.Member"
               extends="com.lkkhpg.dsis.platform.mapper.BaseMapper.STD">
        <id column="MEMBER_ID" property="memberId" jdbcType="DECIMAL"/>
        <result column="ORDER_NUMBER" property="orderNumber" jdbcType="VARCHAR" />
        <result column="NAME" property="name" jdbcType="VARCHAR"/>
        <result column="SALES_ORGANIZATION" property="salesOrganization" jdbcType="VARCHAR"/>
        <result column="MEMBER_TYPE" property="memberType" jdbcType="VARCHAR"/>
        <result column="MARKET_ID" property="marketId" jdbcType="DECIMAL"/>
        <result column="COMPANY_ID" property="companyId" jdbcType="DECIMAL"/>
        <result column="MEMBER_ROLE" property="memberRole" jdbcType="VARCHAR"/>
        <result column="STATUS" property="status" jdbcType="VARCHAR"/>
        <result column="REMARK" property="remark" jdbcType="VARCHAR"/>
        <result column="BR_NUMBER" property="brNumber" jdbcType="VARCHAR"/>
        <result column="REF_COMPANY" property="refCompany" jdbcType="VARCHAR"/>
        <result column="ENGLISH_FIRST_NAME" property="englishFirstName" jdbcType="VARCHAR"/>
        <result column="ENGLISH_LAST_NAME" property="englishLastName" jdbcType="VARCHAR"/>
        <result column="CHINESE_FIRST_NAME" property="chineseFirstName" jdbcType="VARCHAR"/>
        <result column="CHINESE_LAST_NAME" property="chineseLastName" jdbcType="VARCHAR"/>
        <result column="ENGLISH_NAME" property="englishName" jdbcType="VARCHAR"/>
        <result column="CHINESE_NAME" property="chineseName" jdbcType="VARCHAR"/>
        <result column="GENDER" property="gender" jdbcType="VARCHAR"/>
        <result column="DOB" property="dob" jdbcType="TIMESTAMP"/>
        <result column="ID_TYPE" property="idType" jdbcType="VARCHAR"/>
        <result column="ID_NUMBER" property="idNumber" jdbcType="VARCHAR"/>
        <result column="NATIONALITY" property="nationality" jdbcType="VARCHAR"/>
        <result column="COUNTRY" property="country" jdbcType="VARCHAR"/>
        <result column="LANGUAGE" property="language" jdbcType="VARCHAR"/>
        <result column="RACE" property="race" jdbcType="VARCHAR"/>
        <result column="EDUCATION" property="education" jdbcType="VARCHAR"/>
        <result column="CITIZEN_TYPE" property="citizenType" jdbcType="VARCHAR"/>
        <result column="NHI_TAX_EXCLUDED" property="nhiTaxExcluded" jdbcType="VARCHAR"/>
        <result column="GST_ID_NUMBER" property="gstIdNumber" jdbcType="VARCHAR"/>
        <result column="AD_OPT_IN" property="adOptIn" jdbcType="VARCHAR"/>
        <result column="SYS_MSG_IN" property="sysMsgIn" jdbcType="VARCHAR"/>
        <result column="JOINT_SITE" property="jointSite" jdbcType="VARCHAR"/>
        <result column="JOINT_DATE" property="jointDate" jdbcType="TIMESTAMP"/>
        <result column="APPROVAL_DATE" property="approvalDate" jdbcType="TIMESTAMP"/>
        <result column="SPONSOR_ID" property="sponsorId" jdbcType="DECIMAL"/>
        <result column="ACCEPT_BONUS" property="acceptBonus" jdbcType="VARCHAR"/>
        <result column="SALES_ORG_ID" property="salesOrgId" jdbcType="DECIMAL"/>
        <result column="MEMBER_CODE" property="memberCode" jdbcType="VARCHAR"/>
        <result column="AREA_CODE" property="areaCode" jdbcType="VARCHAR"/>
        <result column="PHONE_NO" property="phoneNo" jdbcType="VARCHAR"/>
        <result column="OTHER_AREA_CODE" property="othAreaCode" jdbcType="VARCHAR"/>
        <result column="OTH_PHONE_NO" property="othPhoneNo" jdbcType="VARCHAR"/>
        <result column="EMAIL" property="email" jdbcType="VARCHAR"/>
        <result column="WARNING_MSG" property="warningMsg" jdbcType="VARCHAR"/>
        <result column="TRAVEL_PLAN_MONTH" property="travelPlanMonth" jdbcType="VARCHAR"/>
        <result column="SYNC_FLAG" property="syncFlag" jdbcType="VARCHAR"/>
        <result column="DAPP_SYNC_FLAG" property="dappSyncFlag" jdbcType="VARCHAR"/>
        <result column="DAPP_APP_NO" property="dappAppNo" jdbcType="VARCHAR"/>
        <result column="BONUS_RCV_METHOD" property="bonusRcvMethod" jdbcType="VARCHAR"/>
        <result column="TERMINATION_DATE" property="terminationDate" jdbcType="TIMESTAMP"/>
        <result column="REF_COMPANY_EN" property="refCompanyEn" jdbcType="VARCHAR"/>
        <!-- 关联属性 -->
        <result column="HOME_LOCATION_ID" property="homeLocationId" jdbcType="DECIMAL"/>
        <result column="CONTACT_LOCATION_ID" property="contactLocationId" jdbcType="DECIMAL"/>
        <result column="TRAVEL_COUNT" property="travelCount" jdbcType="DECIMAL"/>
        <result column="MEMBER_NAME" property="memberName" jdbcType="VARCHAR"/>
        <result column="STATUS_DESC" property="statusDesc" jdbcType="VARCHAR"/>
        <result column="MARKET_CODE" property="marketCode" jdbcType="VARCHAR"/>
        <result column="MARKET_NAME" property="marketName" jdbcType="VARCHAR"/>
        <result column="COMPANY_CODE" property="companyCode" jdbcType="VARCHAR"/>
        <result column="COMPANY_NAME" property="companyName" jdbcType="VARCHAR"/>
        <result column="SPONSOR_NAME" property="sponsorName" jdbcType="VARCHAR"/>
        <result column="SPONSOR_CHINESE_NAME" property="sponsorChineseName" jdbcType="VARCHAR"/>
        <result column="SPONSOR_ENGLISH_NAME" property="sponsorEnglishName" jdbcType="VARCHAR"/>
        <result column="RANK" property="rank" jdbcType="DECIMAL"/>
        <result column="country_name" property="countryName" jdbcType="VARCHAR"/>
        <result column="nationality_name" property="nationalityName" jdbcType="VARCHAR"/>
        <result column="home_location" property="homeLocation" jdbcType="VARCHAR"/>
        <result column="contact_location" property="contactLocation" jdbcType="VARCHAR"/>
        <result column="deadline" property="deadline" jdbcType="DECIMAL"/>
        <result column="signature_file_id" property="signatureFileId" jdbcType="DECIMAL"/>
        <result column="salesPiont" property="salesPiont" jdbcType="DECIMAL"/>
        <result column="exchangeBalance" property="exchangeBalance" jdbcType="DECIMAL"/>
        <result column="remainingBalance" property="remainingBalance" jdbcType="DECIMAL"/>
        <result column="currentPv" property="currentPv" jdbcType="DECIMAL"/>
        <result column="SPONSOR_NO" property="sponsorNo" jdbcType="VARCHAR"/>
        <result column="login_name" property="loginName" jdbcType="VARCHAR"/>
        <result column="account_id" property="accountId" jdbcType="DECIMAL"/>
        <result column="account_type" property="accountType" jdbcType="VARCHAR"/>
        <result column="first_login_flag" property="firstLoginFlag" jdbcType="VARCHAR"/>
        <result column="joint_site_type" property="jointSiteType" jdbcType="VARCHAR"/>
        <result column="joint_site_code" property="jointSiteCode" jdbcType="VARCHAR"/>
        <result column="joint_site_name" property="jointSiteName" jdbcType="VARCHAR"/>
        <result column="area_phone" property="areaPhone" jdbcType="VARCHAR"/>
        <result column="has_change_ownership_temp" property="hasChangeOwnershipTemp" jdbcType="VARCHAR"/>
        <result column="sponsor_market_code" property="sponsorMarketCode" jdbcType="VARCHAR"/>
        <result column="discount" property="discount" jdbcType="DECIMAL"/>

        <result column="discountAmt" property="discountAmt" jdbcType="DECIMAL"/>
        <result column="availableDiscount" property="availableDiscount" jdbcType="DECIMAL"/>
        <result column="freezeDiscount" property="freezeDiscount" jdbcType="DECIMAL"/>
    </resultMap>
    <sql id="Base_Column_List">
    MEMBER_ID, MEMBER_TYPE, MARKET_ID, COMPANY_ID, MEMBER_ROLE, STATUS, REMARK, BR_NUMBER,
    REF_COMPANY, ENGLISH_NAME, CHINESE_NAME, GENDER, DOB, ID_TYPE, ID_NUMBER, NATIONALITY,
    COUNTRY, LANGUAGE, RACE, EDUCATION, CITIZEN_TYPE, NHI_TAX_EXCLUDED, GST_ID_NUMBER,
    AD_OPT_IN, SYS_MSG_IN, JOINT_SITE, JOINT_DATE, APPROVAL_DATE, SPONSOR_ID, ACCEPT_BONUS,
    OBJECT_VERSION_NUMBER, REQUEST_ID, PROGRAM_ID, CREATION_DATE, CREATED_BY, LAST_UPDATED_BY,
    LAST_UPDATE_DATE, LAST_UPDATE_LOGIN, ATTRIBUTE_CATEGORY, ATTRIBUTE1, ATTRIBUTE2,
    ATTRIBUTE3, ATTRIBUTE4, ATTRIBUTE5, ATTRIBUTE6, ATTRIBUTE7, ATTRIBUTE8, ATTRIBUTE9,
    ATTRIBUTE10, ATTRIBUTE11, ATTRIBUTE12, ATTRIBUTE13, ATTRIBUTE14,ATTRIBUTE15, SALES_ORGANIZATION, SALES_ORG_ID,
    MEMBER_CODE, AREA_CODE, PHONE_NO, OTHER_AREA_CODE, OTH_PHONE_NO, EMAIL, WARNING_MSG, TRAVEL_PLAN_MONTH, SYNC_FLAG,
    SPONSOR_NO, ENGLISH_FIRST_NAME, ENGLISH_LAST_NAME, CHINESE_FIRST_NAME, CHINESE_LAST_NAME,
    JOINT_SITE_TYPE, MARKET_CODE,COMPANY_CODE, BONUS_RCV_METHOD, TERMINATION_DATE, REF_COMPANY_EN
  </sql>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from MM_MEMBER
    where MEMBER_ID = #{memberId,jdbcType=DECIMAL}
  </delete>

    <sql id="discount_Column_List">
    member_name, member_code, discount_amt, discount, freezeDiscount, availableDiscount
  </sql>




    <!--updated by 11816 at 2018/01/18 13:43-->
    <select id="queryDiscount" parameterType="com.lkkhpg.dsis.common.member.dto.Member" resultMap="BaseResultMap">
        SELECT
        concat(mm.CHINESE_FIRST_NAME, mm.CHINESE_LAST_NAME) member_name,
        mm.MEMBER_CODE member_code,
        nvl(mm.DISCOUNT_AMT, 0) discountAmt,
        nvl(mm.DISCOUNT, 0) discount,
        nvl((
        SELECT sum(DISCOUNT_AMT)
        FROM OM_SALES_ORDER
        WHERE MEMBER_ID = mm.member_id
        AND ORDER_STATUS IN ('SAV', 'WPAY', 'CHECK', 'PAYIN')), 0) freezeDiscount,
        nvl(mm.DISCOUNT_AMT, 0) - nvl((
        SELECT sum(DISCOUNT_AMT)
        FROM OM_SALES_ORDER
        WHERE MEMBER_ID = mm.member_id AND ORDER_STATUS IN ('SAV', 'WPAY', 'CHECK', 'PAYIN')),
        0) availableDiscount
        FROM MM_MEMBER mm
        <where>
            market_id = #{request.marketId, jdbcType=DECIMAL}
            and nvl(mm.discount,0) != 0
            <if test="memberCode != null">
                and member_Code = #{memberCode, jdbcType=DECIMAL}
            </if>
            <if test="discountAmtFrom != null">
                and nvl(discount_amt,0) <![CDATA[ >= ]]> #{discountAmtFrom , jdbcType=DECIMAL}
            </if>
            <if test="discountAmtTo != null">
                and nvl(discount_amt,0) <![CDATA[ <= ]]> #{discountAmtTo , jdbcType=DECIMAL}
            </if>
            <if test="salesOrgId != null">
                and sales_org_id= #{salesOrgId, jdbcType=DECIMAL}
            </if>
        </where>
    </select>


    <insert id="insert" parameterType="com.lkkhpg.dsis.common.member.dto.Member">
        <selectKey resultType="java.lang.Long" keyProperty="memberId" order="BEFORE">
select UNIX_TIMESTAMP()*1000+floor(rand()*1000) from dual
        </selectKey>
        insert into MM_MEMBER (MEMBER_ID, MEMBER_TYPE, MARKET_ID,
        COMPANY_ID, MEMBER_ROLE, STATUS,
        REMARK, BR_NUMBER, REF_COMPANY,
        GENDER, DISCOUNT,
        DOB, ID_TYPE, ID_NUMBER,
        NATIONALITY, COUNTRY, LANGUAGE,
        RACE, EDUCATION, CITIZEN_TYPE,
        NHI_TAX_EXCLUDED, GST_ID_NUMBER, AD_OPT_IN,
        SYS_MSG_IN, JOINT_SITE, JOINT_DATE,
        APPROVAL_DATE, SPONSOR_ID, ACCEPT_BONUS,
        OBJECT_VERSION_NUMBER, REQUEST_ID, PROGRAM_ID,
        CREATION_DATE, CREATED_BY, LAST_UPDATED_BY,
        LAST_UPDATE_DATE, LAST_UPDATE_LOGIN, ATTRIBUTE_CATEGORY,
        ATTRIBUTE1, ATTRIBUTE2, ATTRIBUTE3,
        ATTRIBUTE4, ATTRIBUTE5, ATTRIBUTE6,
        ATTRIBUTE7, ATTRIBUTE8, ATTRIBUTE9,
        ATTRIBUTE10, ATTRIBUTE11, ATTRIBUTE12,
        ATTRIBUTE13, ATTRIBUTE14, ATTRIBUTE15,SALES_ORGANIZATION,
        SALES_ORG_ID, MEMBER_CODE, AREA_CODE, PHONE_NO,
        OTHER_AREA_CODE, OTH_PHONE_NO, EMAIL, WARNING_MSG,
        TRAVEL_PLAN_MONTH, SYNC_FLAG, DAPP_SYNC_FLAG, DAPP_APP_NO, SPONSOR_NO,
        ENGLISH_FIRST_NAME, ENGLISH_LAST_NAME, CHINESE_FIRST_NAME,
        CHINESE_LAST_NAME, JOINT_SITE_TYPE, BONUS_RCV_METHOD, TERMINATION_DATE, REF_COMPANY_EN)
        values (#{memberId,jdbcType=DECIMAL}, #{memberType,jdbcType=VARCHAR}, #{marketId,jdbcType=DECIMAL},
        #{companyId,jdbcType=DECIMAL}, #{memberRole,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR},
        #{remark,jdbcType=VARCHAR}, #{brNumber,jdbcType=VARCHAR}, #{refCompany,jdbcType=VARCHAR},
        #{gender,jdbcType=VARCHAR}, #{discount, jdbcType=DECIMAL},
        #{dob,jdbcType=TIMESTAMP}, #{idType,jdbcType=VARCHAR}, #{idNumber,jdbcType=VARCHAR},
        #{nationality,jdbcType=VARCHAR}, #{country,jdbcType=VARCHAR}, #{language,jdbcType=VARCHAR},
        #{race,jdbcType=VARCHAR}, #{education,jdbcType=VARCHAR}, #{citizenType,jdbcType=VARCHAR},
        #{nhiTaxExcluded,jdbcType=VARCHAR}, #{gstIdNumber,jdbcType=VARCHAR}, #{adOptIn,jdbcType=VARCHAR},
        #{sysMsgIn,jdbcType=VARCHAR}, #{jointSite,jdbcType=VARCHAR}, #{jointDate,jdbcType=TIMESTAMP},
        #{approvalDate,jdbcType=TIMESTAMP}, #{sponsorId,jdbcType=DECIMAL}, #{acceptBonus,jdbcType=VARCHAR},
        1, #{requestId,jdbcType=DECIMAL}, #{programId,jdbcType=DECIMAL},
        CURRENT_TIMESTAMP, #{createdBy,jdbcType=DECIMAL}, #{lastUpdatedBy,jdbcType=DECIMAL},
        CURRENT_TIMESTAMP, #{lastUpdateLogin,jdbcType=DECIMAL}, #{attributeCategory,jdbcType=VARCHAR},
        #{attribute1,jdbcType=VARCHAR}, #{attribute2,jdbcType=VARCHAR}, #{attribute3,jdbcType=VARCHAR},
        #{attribute4,jdbcType=VARCHAR}, #{attribute5,jdbcType=VARCHAR}, #{attribute6,jdbcType=VARCHAR},
        #{attribute7,jdbcType=VARCHAR}, #{attribute8,jdbcType=VARCHAR}, #{attribute9,jdbcType=VARCHAR},
        #{attribute10,jdbcType=VARCHAR}, #{attribute11,jdbcType=VARCHAR}, #{attribute12,jdbcType=VARCHAR},
        #{attribute13,jdbcType=VARCHAR}, #{attribute14,jdbcType=VARCHAR},#{attribute15,jdbcType=VARCHAR},
        #{salesOrganization,jdbcType=VARCHAR},
        #{salesOrgId,jdbcType=DECIMAL}, #{memberCode,jdbcType=VARCHAR}, #{areaCode,jdbcType=VARCHAR},
        #{phoneNo,jdbcType=VARCHAR},
        #{othAreaCode,jdbcType=VARCHAR}, #{othPhoneNo,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR},
        #{warningMsg,jdbcType=VARCHAR},
        #{travelPlanMonth,jdbcType=VARCHAR}, #{syncFlag,jdbcType=VARCHAR}, #{dappSyncFlag,jdbcType=VARCHAR},
        #{dappAppNo,jdbcType=VARCHAR},
        #{sponsorNo,jdbcType=VARCHAR}, #{englishFirstName,jdbcType=VARCHAR}, #{englishLastName,jdbcType=VARCHAR},
        #{chineseFirstName,jdbcType=VARCHAR},
        #{chineseLastName,jdbcType=VARCHAR}, #{jointSiteType,jdbcType=VARCHAR}, #{bonusRcvMethod,jdbcType=VARCHAR},
        #{terminationDate,jdbcType=TIMESTAMP}, #{refCompanyEn, jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.lkkhpg.dsis.common.member.dto.Member">
        <selectKey resultType="java.lang.Long" keyProperty="memberId" order="BEFORE">
select UNIX_TIMESTAMP()*1000+floor(rand()*1000) from dual
        </selectKey>
        insert into MM_MEMBER
        <trim prefix="(" suffix=")" suffixOverrides=",">
            MEMBER_ID,
            <if test="memberType != null">
                MEMBER_TYPE,
            </if>
            <if test="marketId != null">
                MARKET_ID,
            </if>
            <if test="companyId != null">
                COMPANY_ID,
            </if>
            <if test="memberRole != null">
                MEMBER_ROLE,
            </if>
            <if test="status != null">
                STATUS,
            </if>
            <if test="remark != null">
                REMARK,
            </if>
            <if test="brNumber != null">
                BR_NUMBER,
            </if>
            <if test="refCompany != null">
                REF_COMPANY,
            </if>
            <if test="gender != null">
                GENDER,
            </if>
            <if test="dob != null">
                DOB,
            </if>
            <if test="idType != null">
                ID_TYPE,
            </if>
            <if test="idNumber != null">
                ID_NUMBER,
            </if>
            <if test="nationality != null">
                NATIONALITY,
            </if>
            <if test="country != null">
                COUNTRY,
            </if>
            <if test="language != null">
                LANGUAGE,
            </if>
            <if test="race != null">
                RACE,
            </if>
            <if test="education != null">
                EDUCATION,
            </if>
            <if test="citizenType != null">
                CITIZEN_TYPE,
            </if>
            <if test="nhiTaxExcluded != null">
                NHI_TAX_EXCLUDED,
            </if>
            <if test="gstIdNumber != null">
                GST_ID_NUMBER,
            </if>
            <if test="adOptIn != null">
                AD_OPT_IN,
            </if>
            <if test="sysMsgIn != null">
                SYS_MSG_IN,
            </if>
            <if test="jointSite != null">
                JOINT_SITE,
            </if>
            <if test="jointDate != null">
                JOINT_DATE,
            </if>
            <if test="approvalDate != null">
                APPROVAL_DATE,
            </if>
            <if test="sponsorId != null">
                SPONSOR_ID,
            </if>
            <if test="acceptBonus != null">
                ACCEPT_BONUS,
            </if>
            OBJECT_VERSION_NUMBER,

            <if test="requestId != null">
                REQUEST_ID,
            </if>
            <if test="programId != null">
                PROGRAM_ID,
            </if>
            CREATION_DATE,


            <if test="createdBy != null">
                CREATED_BY,
            </if>
            <if test="lastUpdatedBy != null">
                LAST_UPDATED_BY,
            </if>
            LAST_UPDATE_DATE,


            <if test="lastUpdateLogin != null">
                LAST_UPDATE_LOGIN,
            </if>
            <if test="attributeCategory != null">
                ATTRIBUTE_CATEGORY,
            </if>
            <if test="attribute1 != null">
                ATTRIBUTE1,
            </if>
            <if test="attribute2 != null">
                ATTRIBUTE2,
            </if>
            <if test="attribute3 != null">
                ATTRIBUTE3,
            </if>
            <if test="attribute4 != null">
                ATTRIBUTE4,
            </if>
            <if test="attribute5 != null">
                ATTRIBUTE5,
            </if>
            <if test="attribute6 != null">
                ATTRIBUTE6,
            </if>
            <if test="attribute7 != null">
                ATTRIBUTE7,
            </if>
            <if test="attribute8 != null">
                ATTRIBUTE8,
            </if>
            <if test="attribute9 != null">
                ATTRIBUTE9,
            </if>
            <if test="attribute10 != null">
                ATTRIBUTE10,
            </if>
            <if test="attribute11 != null">
                ATTRIBUTE11,
            </if>
            <if test="attribute12 != null">
                ATTRIBUTE12,
            </if>
            <if test="attribute13 != null">
                ATTRIBUTE13,
            </if>
            <if test="attribute14 != null">
                ATTRIBUTE14,
            </if>
            <if test="attribute15 != null">
                ATTRIBUTE15,
            </if>
            <if test="salesOrganization != null">
                SALES_ORGANIZATION,
            </if>
            <if test="salesOrgId != null">
                SALES_ORG_ID,
            </if>
            <if test="memberCode != null">
                MEMBER_CODE,
            </if>
            <if test="areaCode != null">
                AREA_CODE,
            </if>
            <if test="phoneNo != null">
                PHONE_NO,
            </if>
            <if test="othAreaCode != null">
                OTHER_AREA_CODE,
            </if>
            <if test="othPhoneNo != null">
                OTH_PHONE_NO,
            </if>
            <if test="email != null">
                EMAIL,
            </if>
            <if test="warningMsg != null">
                WARNING_MSG,
            </if>
            <if test="travelPlanMonth != null">
                TRAVEL_PLAN_MONTH,
            </if>
            <if test="syncFlag != null">
                SYNC_FLAG,
            </if>
            <if test="dappSyncFlag != null">
                DAPP_SYNC_FLAG,
            </if>
            <if test="dappAppNo != null">
                DAPP_APP_NO,
            </if>
            <if test="englishFirstName != null">
                ENGLISH_FIRST_NAME,
            </if>
            <if test="englishLastName != null">
                ENGLISH_LAST_NAME,
            </if>
            <if test="chineseFirstName != null">
                CHINESE_FIRST_NAME,
            </if>
            <if test="chineseLastName != null">
                CHINESE_LAST_NAME,
            </if>
            <if test="jointSiteType != null">
                JOINT_SITE_TYPE,
            </if>
            <if test="bonusRcvMethod != null">
                BONUS_RCV_METHOD,
            </if>
            <if test="terminationDate != null">
                TERMINATION_DATE,
            </if>
            <if test="refCompanyEn != null">
                REF_COMPANY_EN,
            </if>
            <if test="sponsorNo != null">
                SPONSOR_NO,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            #{memberId,jdbcType=DECIMAL},
            <if test="memberType != null">
                #{memberType,jdbcType=VARCHAR},
            </if>
            <if test="marketId != null">
                #{marketId,jdbcType=DECIMAL},
            </if>
            <if test="companyId != null">
                #{companyId,jdbcType=DECIMAL},
            </if>
            <if test="memberRole != null">
                #{memberRole,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=VARCHAR},
            </if>
            <if test="remark != null">
                #{remark,jdbcType=VARCHAR},
            </if>
            <if test="brNumber != null">
                #{brNumber,jdbcType=VARCHAR},
            </if>
            <if test="refCompany != null">
                #{refCompany,jdbcType=VARCHAR},
            </if>
            <if test="gender != null">
                #{gender,jdbcType=VARCHAR},
            </if>
            <if test="dob != null">
                #{dob,jdbcType=TIMESTAMP},
            </if>
            <if test="idType != null">
                #{idType,jdbcType=VARCHAR},
            </if>
            <if test="idNumber != null">
                #{idNumber,jdbcType=VARCHAR},
            </if>
            <if test="nationality != null">
                #{nationality,jdbcType=VARCHAR},
            </if>
            <if test="country != null">
                #{country,jdbcType=VARCHAR},
            </if>
            <if test="language != null">
                #{language,jdbcType=VARCHAR},
            </if>
            <if test="race != null">
                #{race,jdbcType=VARCHAR},
            </if>
            <if test="education != null">
                #{education,jdbcType=VARCHAR},
            </if>
            <if test="citizenType != null">
                #{citizenType,jdbcType=VARCHAR},
            </if>
            <if test="nhiTaxExcluded != null">
                #{nhiTaxExcluded,jdbcType=VARCHAR},
            </if>
            <if test="gstIdNumber != null">
                #{gstIdNumber,jdbcType=VARCHAR},
            </if>
            <if test="adOptIn != null">
                #{adOptIn,jdbcType=VARCHAR},
            </if>
            <if test="sysMsgIn != null">
                #{sysMsgIn,jdbcType=VARCHAR},
            </if>
            <if test="jointSite != null">
                #{jointSite,jdbcType=VARCHAR},
            </if>
            <if test="jointDate != null">
                #{jointDate,jdbcType=TIMESTAMP},
            </if>
            <if test="approvalDate != null">
                #{approvalDate,jdbcType=TIMESTAMP},
            </if>
            <if test="sponsorId != null">
                #{sponsorId,jdbcType=DECIMAL},
            </if>
            <if test="acceptBonus != null">
                #{acceptBonus,jdbcType=VARCHAR},
            </if>
            1,

            <if test="requestId != null">
                #{requestId,jdbcType=DECIMAL},
            </if>
            <if test="programId != null">
                #{programId,jdbcType=DECIMAL},
            </if>
            CURRENT_TIMESTAMP,
            <if test="createdBy != null">
                #{createdBy,jdbcType=DECIMAL},
            </if>
            <if test="lastUpdatedBy != null">
                #{lastUpdatedBy,jdbcType=DECIMAL},
            </if>
            CURRENT_TIMESTAMP,
            <if test="lastUpdateLogin != null">
                #{lastUpdateLogin,jdbcType=DECIMAL},
            </if>
            <if test="attributeCategory != null">
                #{attributeCategory,jdbcType=VARCHAR},
            </if>
            <if test="attribute1 != null">
                #{attribute1,jdbcType=VARCHAR},
            </if>
            <if test="attribute2 != null">
                #{attribute2,jdbcType=VARCHAR},
            </if>
            <if test="attribute3 != null">
                #{attribute3,jdbcType=VARCHAR},
            </if>
            <if test="attribute4 != null">
                #{attribute4,jdbcType=VARCHAR},
            </if>
            <if test="attribute5 != null">
                #{attribute5,jdbcType=VARCHAR},
            </if>
            <if test="attribute6 != null">
                #{attribute6,jdbcType=VARCHAR},
            </if>
            <if test="attribute7 != null">
                #{attribute7,jdbcType=VARCHAR},
            </if>
            <if test="attribute8 != null">
                #{attribute8,jdbcType=VARCHAR},
            </if>
            <if test="attribute9 != null">
                #{attribute9,jdbcType=VARCHAR},
            </if>
            <if test="attribute10 != null">
                #{attribute10,jdbcType=VARCHAR},
            </if>
            <if test="attribute11 != null">
                #{attribute11,jdbcType=VARCHAR},
            </if>
            <if test="attribute12 != null">
                #{attribute12,jdbcType=VARCHAR},
            </if>
            <if test="attribute13 != null">
                #{attribute13,jdbcType=VARCHAR},
            </if>
            <if test="attribute14 != null">
                #{attribute14,jdbcType=VARCHAR},
            </if>
            <if test="attribute15 != null">
                #{attribute15,jdbcType=VARCHAR},
            </if>
            <if test="salesOrganization != null">
                #{salesOrganization,jdbcType=VARCHAR},
            </if>
            <if test="salesOrgId != null">
                #{salesOrgId,jdbcType=DECIMAL},
            </if>
            <if test="memberCode != null">
                #{memberCode,jdbcType=VARCHAR},
            </if>
            <if test="areaCode != null">
                #{areaCode,jdbcType=VARCHAR},
            </if>
            <if test="phoneNo != null">
                #{phoneNo,jdbcType=VARCHAR},
            </if>
            <if test="othAreaCode != null">
                #{othAreaCode,jdbcType=VARCHAR},
            </if>
            <if test="othPhoneNo != null">
                #{othPhoneNo,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="warningMsg != null">
                #{warningMsg,jdbcType=VARCHAR},
            </if>
            <if test="travelPlanMonth != null">
                #{travelPlanMonth,jdbcType=VARCHAR},
            </if>
            <if test="syncFlag != null">
                #{syncFlag,jdbcType=VARCHAR},
            </if>
            <if test="dappSyncFlag != null">
                #{dappSyncFlag,jdbcType=VARCHAR},
            </if>
            <if test="dappAppNo != null">
                #{dappAppNo,jdbcType=VARCHAR},
            </if>
            <if test="englishFirstName != null">
                #{englishFirstName,jdbcType=VARCHAR},
            </if>
            <if test="englishLastName != null">
                #{englishLastName,jdbcType=VARCHAR},
            </if>
            <if test="chineseFirstName != null">
                #{chineseFirstName,jdbcType=VARCHAR},
            </if>
            <if test="chineseLastName != null">
                #{chineseLastName,jdbcType=VARCHAR},
            </if>
            <if test="jointSiteType != null">
                #{jointSiteType,jdbcType=VARCHAR},
            </if>
            <if test="bonusRcvMethod != null">
                #{bonusRcvMethod,jdbcType=VARCHAR},
            </if>
            <if test="terminationDate != null">
                #{terminationDate,jdbcType=TIMESTAMP},
            </if>
            <if test="refCompanyEn != null">
                #{refCompanyEn, jdbcType=VARCHAR},
            </if>
            <if test="sponsorNo != null">
                #{sponsorNo, jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.lkkhpg.dsis.common.member.dto.Member">
        update MM_MEMBER
        <set>
            <if test="memberType != null">
                MEMBER_TYPE = #{memberType,jdbcType=VARCHAR},
            </if>
            <if test="marketId != null">
                MARKET_ID = #{marketId,jdbcType=DECIMAL},
            </if>
            <if test="companyId != null">
                COMPANY_ID = #{companyId,jdbcType=DECIMAL},
            </if>
            <if test="memberRole != null">
                MEMBER_ROLE = #{memberRole,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                STATUS = #{status,jdbcType=VARCHAR},
            </if>
            <if test="remark != null">
                REMARK = #{remark,jdbcType=VARCHAR},
            </if>
            <if test="brNumber != null">
                BR_NUMBER = #{brNumber,jdbcType=VARCHAR},
            </if>
            <if test="refCompany != null">
                REF_COMPANY = #{refCompany,jdbcType=VARCHAR},
            </if>
            <if test="gender != null">
                GENDER = #{gender,jdbcType=VARCHAR},
            </if>
            <if test="dob != null">
                DOB = #{dob,jdbcType=TIMESTAMP},
            </if>
            <if test="idType != null">
                ID_TYPE = #{idType,jdbcType=VARCHAR},
            </if>
            <if test="idNumber != null">
                ID_NUMBER = #{idNumber,jdbcType=VARCHAR},
            </if>
            <if test="nationality != null">
                NATIONALITY = #{nationality,jdbcType=VARCHAR},
            </if>
            <if test="country != null">
                COUNTRY = #{country,jdbcType=VARCHAR},
            </if>
            <if test="language != null">
                LANGUAGE = #{language,jdbcType=VARCHAR},
            </if>
            <if test="race != null">
                RACE = #{race,jdbcType=VARCHAR},
            </if>
            <if test="education != null">
                EDUCATION = #{education,jdbcType=VARCHAR},
            </if>
            <if test="citizenType != null">
                CITIZEN_TYPE = #{citizenType,jdbcType=VARCHAR},
            </if>
            <if test="nhiTaxExcluded != null">
                NHI_TAX_EXCLUDED = #{nhiTaxExcluded,jdbcType=VARCHAR},
            </if>
            <if test="gstIdNumber != null">
                GST_ID_NUMBER = #{gstIdNumber,jdbcType=VARCHAR},
            </if>
            <if test="adOptIn != null">
                AD_OPT_IN = #{adOptIn,jdbcType=VARCHAR},
            </if>
            <if test="sysMsgIn != null">
                SYS_MSG_IN = #{sysMsgIn,jdbcType=VARCHAR},
            </if>
            <if test="jointSite != null">
                JOINT_SITE = #{jointSite,jdbcType=VARCHAR},
            </if>
            <if test="jointDate != null">
                JOINT_DATE = #{jointDate,jdbcType=TIMESTAMP},
            </if>
            <if test="approvalDate != null">
                APPROVAL_DATE = #{approvalDate,jdbcType=TIMESTAMP},
            </if>
            <if test="sponsorId != null">
                SPONSOR_ID = #{sponsorId,jdbcType=DECIMAL},
            </if>
            <if test="acceptBonus != null">
                ACCEPT_BONUS = #{acceptBonus,jdbcType=VARCHAR},
            </if>
            OBJECT_VERSION_NUMBER = OBJECT_VERSION_NUMBER + 1,

            <if test="requestId != null">
                REQUEST_ID = #{requestId,jdbcType=DECIMAL},
            </if>
            <if test="programId != null">
                PROGRAM_ID = #{programId,jdbcType=DECIMAL},
            </if>
            <if test="createdBy != null">
                CREATED_BY = #{createdBy,jdbcType=DECIMAL},
            </if>
            <if test="lastUpdatedBy != null">
                LAST_UPDATED_BY = #{lastUpdatedBy,jdbcType=DECIMAL},
            </if>
            LAST_UPDATE_DATE = CURRENT_TIMESTAMP,

            <if test="lastUpdateLogin != null">
                LAST_UPDATE_LOGIN = #{lastUpdateLogin,jdbcType=DECIMAL},
            </if>
            <if test="attributeCategory != null">
                ATTRIBUTE_CATEGORY = #{attributeCategory,jdbcType=VARCHAR},
            </if>
            <if test="attribute1 != null">
                ATTRIBUTE1 = #{attribute1,jdbcType=VARCHAR},
            </if>
            <if test="attribute2 != null">
                ATTRIBUTE2 = #{attribute2,jdbcType=VARCHAR},
            </if>
            <if test="attribute3 != null">
                ATTRIBUTE3 = #{attribute3,jdbcType=VARCHAR},
            </if>
            <if test="attribute4 != null">
                ATTRIBUTE4 = #{attribute4,jdbcType=VARCHAR},
            </if>
            <if test="attribute5 != null">
                ATTRIBUTE5 = #{attribute5,jdbcType=VARCHAR},
            </if>
            <if test="attribute6 != null">
                ATTRIBUTE6 = #{attribute6,jdbcType=VARCHAR},
            </if>
            <if test="attribute7 != null">
                ATTRIBUTE7 = #{attribute7,jdbcType=VARCHAR},
            </if>
            <if test="attribute8 != null">
                ATTRIBUTE8 = #{attribute8,jdbcType=VARCHAR},
            </if>
            <if test="attribute9 != null">
                ATTRIBUTE9 = #{attribute9,jdbcType=VARCHAR},
            </if>
            <if test="attribute10 != null">
                ATTRIBUTE10 = #{attribute10,jdbcType=VARCHAR},
            </if>
            <if test="attribute11 != null">
                ATTRIBUTE11 = #{attribute11,jdbcType=VARCHAR},
            </if>
            <if test="attribute12 != null">
                ATTRIBUTE12 = #{attribute12,jdbcType=VARCHAR},
            </if>
            <if test="attribute13 != null">
                ATTRIBUTE13 = #{attribute13,jdbcType=VARCHAR},
            </if>
            <if test="attribute14 != null">
                ATTRIBUTE14 = #{attribute14,jdbcType=VARCHAR},
            </if>
            <if test="attribute15 != null">
                ATTRIBUTE15 = #{attribute15,jdbcType=VARCHAR},
            </if>
            <if test="salesOrganization != null">
                SALES_ORGANIZATION = #{salesOrganization,jdbcType=VARCHAR},
            </if>
            <if test="salesOrgId != null">
                SALES_ORG_ID = #{salesOrgId,jdbcType=DECIMAL},
            </if>
            <if test="memberCode != null">
                MEMBER_CODE = #{memberCode,jdbcType=VARCHAR},
            </if>
            <if test="areaCode != null">
                AREA_CODE = #{areaCode,jdbcType=VARCHAR},
            </if>
            <if test="phoneNo != null">
                PHONE_NO = #{phoneNo,jdbcType=VARCHAR},
            </if>
            <if test="othAreaCode != null">
                OTHER_AREA_CODE = #{othAreaCode,jdbcType=VARCHAR},
            </if>
            <if test="othPhoneNo != null">
                OTH_PHONE_NO = #{othPhoneNo,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                EMAIL = #{email,jdbcType=VARCHAR},
            </if>
            <if test="warningMsg != null">
                WARNING_MSG = #{warningMsg,jdbcType=VARCHAR},
            </if>
            <if test="travelPlanMonth != null">
                TRAVEL_PLAN_MONTH = #{travelPlanMonth,jdbcType=VARCHAR},
            </if>
            <if test="syncFlag != null">
                SYNC_FLAG = #{syncFlag,jdbcType=VARCHAR},
            </if>
            <if test="dappSyncFlag != null">
                DAPP_SYNC_FLAG = #{dappSyncFlag,jdbcType=VARCHAR},
            </if>
            <if test="dappAppNo != null">
                DAPP_APP_NO = #{dappAppNo,jdbcType=VARCHAR},
            </if>
            <if test="englishFirstName != null">
                ENGLISH_FIRST_NAME = #{englishFirstName,jdbcType=VARCHAR},
            </if>
            <if test="englishLastName != null">
                ENGLISH_LAST_NAME = #{englishLastName,jdbcType=VARCHAR},
            </if>
            <if test="chineseFirstName != null">
                CHINESE_FIRST_NAME = #{chineseFirstName,jdbcType=VARCHAR},
            </if>
            <if test="chineseLastName != null">
                CHINESE_LAST_NAME = #{chineseLastName,jdbcType=VARCHAR},
            </if>
            <if test="bonusRcvMethod != null">
                BONUS_RCV_METHOD = #{bonusRcvMethod,jdbcType=VARCHAR},
            </if>
            <if test="terminationDate != null">
                TERMINATION_DATE = #{terminationDate,jdbcType=TIMESTAMP},
            </if>
            <if test="refCompanyEn != null">
                REF_COMPANY_EN = #{refCompanyEn, jdbcType=VARCHAR},
            </if>
            <if test="discount != null">
                discount = #{discount, jdbcType=DECIMAL}
            </if>
        </set>
        where MEMBER_ID = #{memberId,jdbcType=DECIMAL}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.lkkhpg.dsis.common.member.dto.Member">
        update MM_MEMBER
        set MEMBER_TYPE = #{memberType,jdbcType=VARCHAR},
        MARKET_ID = #{marketId,jdbcType=DECIMAL},
        COMPANY_ID = #{companyId,jdbcType=DECIMAL},
        MEMBER_ROLE = #{memberRole,jdbcType=VARCHAR},
        STATUS = #{status,jdbcType=VARCHAR},
        REMARK = #{remark,jdbcType=VARCHAR},
        BR_NUMBER = #{brNumber,jdbcType=VARCHAR},
        REF_COMPANY = #{refCompany,jdbcType=VARCHAR},
        GENDER = #{gender,jdbcType=VARCHAR},
        DOB = #{dob,jdbcType=TIMESTAMP},
        ID_TYPE = #{idType,jdbcType=VARCHAR},
        ID_NUMBER = #{idNumber,jdbcType=VARCHAR},
        NATIONALITY = #{nationality,jdbcType=VARCHAR},
        COUNTRY = #{country,jdbcType=VARCHAR},
        LANGUAGE = #{language,jdbcType=VARCHAR},
        RACE = #{race,jdbcType=VARCHAR},
        EDUCATION = #{education,jdbcType=VARCHAR},
        CITIZEN_TYPE = #{citizenType,jdbcType=VARCHAR},
        NHI_TAX_EXCLUDED = #{nhiTaxExcluded,jdbcType=VARCHAR},
        GST_ID_NUMBER = #{gstIdNumber,jdbcType=VARCHAR},
        AD_OPT_IN = #{adOptIn,jdbcType=VARCHAR},
        SYS_MSG_IN = #{sysMsgIn,jdbcType=VARCHAR},
        JOINT_SITE = #{jointSite,jdbcType=VARCHAR},
        JOINT_DATE = #{jointDate,jdbcType=TIMESTAMP},
        APPROVAL_DATE = #{approvalDate,jdbcType=TIMESTAMP},
        SPONSOR_ID = #{sponsorId,jdbcType=DECIMAL},
        ACCEPT_BONUS = #{acceptBonus,jdbcType=VARCHAR},
        OBJECT_VERSION_NUMBER = OBJECT_VERSION_NUMBER + 1,
        REQUEST_ID = #{requestId,jdbcType=DECIMAL},
        PROGRAM_ID = #{programId,jdbcType=DECIMAL},
        CREATED_BY = #{createdBy,jdbcType=DECIMAL},
        LAST_UPDATED_BY = #{lastUpdatedBy,jdbcType=DECIMAL},
        LAST_UPDATE_DATE = CURRENT_TIMESTAMP,
        LAST_UPDATE_LOGIN = #{lastUpdateLogin,jdbcType=DECIMAL},
        ATTRIBUTE_CATEGORY = #{attributeCategory,jdbcType=VARCHAR},
        ATTRIBUTE1 = #{attribute1,jdbcType=VARCHAR},
        ATTRIBUTE2 = #{attribute2,jdbcType=VARCHAR},
        ATTRIBUTE3 = #{attribute3,jdbcType=VARCHAR},
        ATTRIBUTE4 = #{attribute4,jdbcType=VARCHAR},
        ATTRIBUTE5 = #{attribute5,jdbcType=VARCHAR},
        ATTRIBUTE6 = #{attribute6,jdbcType=VARCHAR},
        ATTRIBUTE7 = #{attribute7,jdbcType=VARCHAR},
        ATTRIBUTE8 = #{attribute8,jdbcType=VARCHAR},
        ATTRIBUTE9 = #{attribute9,jdbcType=VARCHAR},
        ATTRIBUTE10 = #{attribute10,jdbcType=VARCHAR},
        ATTRIBUTE11 = #{attribute11,jdbcType=VARCHAR},
        ATTRIBUTE12 = #{attribute12,jdbcType=VARCHAR},
        ATTRIBUTE13 = #{attribute13,jdbcType=VARCHAR},
        ATTRIBUTE14 = #{attribute14,jdbcType=VARCHAR},
        ATTRIBUTE15 = #{attribute15,jdbcType=VARCHAR},
        SALES_ORGANIZATION = #{salesOrganization,jdbcType=VARCHAR},
        SALES_ORG_ID = #{salesOrgId,jdbcType=DECIMAL},
        MEMBER_CODE = #{memberCode,jdbcType=VARCHAR},
        AREA_CODE = #{areaCode,jdbcType=VARCHAR},
        PHONE_NO = #{phoneNo,jdbcType=VARCHAR},
        OTHER_AREA_CODE = #{othAreaCode,jdbcType=VARCHAR},
        OTH_PHONE_NO = #{othPhoneNo,jdbcType=VARCHAR},
        EMAIL = #{email,jdbcType=VARCHAR},
        WARNING_MSG = #{warningMsg,jdbcType=VARCHAR},
        TRAVEL_PLAN_MONTH = #{travelPlanMonth,jdbcType=VARCHAR},
        SYNC_FLAG = #{syncFlag,jdbcType=VARCHAR},
        ENGLISH_FIRST_NAME = #{englishFirstName,jdbcType=VARCHAR},
        ENGLISH_LAST_NAME = #{englishLastName,jdbcType=VARCHAR},
        CHINESE_FIRST_NAME = #{chineseFirstName,jdbcType=VARCHAR},
        CHINESE_LAST_NAME = #{chineseLastName,jdbcType=VARCHAR},
        BONUS_RCV_METHOD = #{bonusRcvMethod,jdbcType=VARCHAR},
        TERMINATION_DATE = #{terminationDate,jdbcType=TIMESTAMP},
        REF_COMPANY_EN = #{refCompanyEn, jdbcType=VARCHAR},
        dicount = #{discount, jdbcType=DECIMAL}
        where MEMBER_ID = #{memberId,jdbcType=DECIMAL}
    </update>

    <select id="selectByFullPrimaryKey" parameterType="com.lkkhpg.dsis.common.member.dto.Member"
            resultMap="BaseResultMap">
        select <include refid="Base_Column_List"></include> from mm_member_v mm
        <where>
            <if test="memberCode != null">
                AND mm.member_code like #{memberCode,jdbcType=VARCHAR}
            </if>
        </where>
    </select>

    <!-- 根据会员表ID查询会员信息 -->
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        SELECT mm.member_id,
        mm.member_type,
        mm.market_id,
        mm.company_id,
        mm.market_code,
        mm.company_code,
        mm.member_role,
        mm.status,
        mm.remark,
        mm.br_number,
        mm.ref_company,
        mm.english_first_name,
        mm.english_last_name,
        mm.chinese_first_name,
        mm.chinese_last_name,
        mm.english_name,
        mm.chinese_name,
        mm.member_name,
        mm.gender,
        mm.dob,
        mm.id_type,
        mm.id_number,
        mm.nationality,
        mm.country,
        mm.language,
        mm.race,
        mm.education,
        mm.citizen_type,
        mm.nhi_tax_excluded,
        mm.gst_id_number,
        mm.ad_opt_in,
        mm.sys_msg_in,
        mm.joint_site_type,
        mm.joint_site,
        mm.joint_date,
        mm.approval_date,
        sponsor.member_id sponsor_id,
        mm.sponsor_no,
        decode(sponsor.sponsor_english_name, NULL, omkgdrc.dealer_name, sponsor.sponsor_english_name)
        sponsor_english_name,
        decode(sponsor.sponsor_chinese_name, NULL, omkgdrc.dealer_name, sponsor.sponsor_chinese_name)
        sponsor_chinese_name,
        sponsor.market_code sponsor_market_code,
        mm.accept_bonus,
        mm.object_version_number,
        mm.request_id,
        mm.program_id,
        mm.creation_date,
        mm.created_by,
        mm.last_updated_by,
        mm.last_update_date,
        mm.last_update_login,
        mm.attribute_category,
        mm.attribute1,
        mm.attribute2,
        mm.attribute3,
        mm.attribute4,
        mm.attribute5,
        mm.attribute6,
        mm.attribute7,
        mm.attribute8,
        mm.attribute9,
        mm.attribute10,
        mm.attribute11,
        mm.attribute12,
        mm.attribute13,
        mm.attribute14,
        mm.attribute15,
        mm.SALES_ORGANIZATION,
        mm.sales_org_id,
        mm.member_code,
        mm.area_code,
        mm.phone_no,
        mm.other_area_code,
        mm.oth_phone_no,
        mm.email,
        mm.warning_msg,
        mm.travel_plan_month,
        mm.sync_flag,
        mm.deadline,
        mm.travel_count,
        mm.tp,
        mm.salespiont,
        mm.exchangebalance,
        mm.remainingbalance,
        mm.bonus_rcv_method,
        mm.termination_date,
        mm.ref_company_en,
        mm.discount,
        (SELECT saf.file_id
        FROM sys_attachment_file_v saf
        WHERE saf.source_type = 'MEMBER_SIGNATURE'
        AND saf.source_key = to_char(mm.member_id)) signature_file_id,
        (SELECT scvt.meaning
        FROM sys_code_b scb,
        sys_code_value_b scvb
        LEFT OUTER JOIN sys_code_value_tl scvt
        ON (scvb.code_value_id = scvt.code_value_id AND
        scvt.lang = #{request.locale,jdbcType=VARCHAR,javaType=java.lang.String})
        WHERE scb.code = 'MM.MEMBER_STATUS'
        AND scb.code_id = scvb.code_id
        AND scvb.value = mm.status) status_desc,
        (SELECT coalesce(smt.name, sm.name)
        FROM spm_market_b sm
        LEFT OUTER JOIN spm_market_tl smt
        ON (sm.market_id = smt.market_id AND smt.lang = #{request.locale,jdbcType=VARCHAR,javaType=java.lang.String})
        WHERE mm.market_id = sm.market_id) market_name,
        (SELECT sct.name
        FROM spm_company_b sc
        LEFT OUTER JOIN spm_company_tl sct
        ON (sc.company_id = sct.company_id AND sct.lang = #{request.locale,jdbcType=VARCHAR,javaType=java.lang.String})
        WHERE mm.company_id = sc.company_id) company_name,
        (SELECT sc.name
        FROM spm_country_b sc
        LEFT OUTER JOIN spm_country_tl sct
        ON (sc.country_code = sct.country_code AND sct.lang =
        #{request.locale,jdbcType=VARCHAR,javaType=java.lang.String})
        WHERE sc.country_code = mm.nationality) nationality_name,
        (SELECT sc.name
        FROM spm_country_b sc
        LEFT OUTER JOIN spm_country_tl sct
        ON (sc.country_code = sct.country_code AND sct.lang =
        #{request.locale,jdbcType=VARCHAR,javaType=java.lang.String})
        WHERE sc.country_code = mm.country) country_name,
        (SELECT mmr.rank
        FROM mm_mem_rank mmr
        WHERE mmr.member_id = mm.member_id
        AND mmr.month = to_char(current_date, 'YYYY-MM')) rank,
        (SELECT mmr.ps
        FROM
        OMK.OMK_RTL_SALARY_BALANCE mmr
        WHERE
        mmr.DEALER_NO = mm.member_code
        AND mmr.REF_PERIOD = (
        SELECT TO_CHAR (CURRENT_TIMESTAMP,'yyyyMM') FROM dual)) currentpv,
        (CASE mm.joint_site_type
        WHEN 'DSIS' THEN
        (SELECT sao.code
        FROM spm_sales_organization_b sao
        WHERE mm.joint_site_type = 'DSIS'
        AND to_char(sao.sales_org_id) = mm.joint_site)
        ELSE
        mm.joint_site_type
        END) joint_site_code,
        (CASE mm.joint_site_type
        WHEN 'DSIS' THEN
        (SELECT sot.name
        FROM spm_sales_organization_b sao
        LEFT OUTER JOIN spm_sales_organization_tl sot
        ON (sao.sales_org_id = sot.sales_org_id AND sot.lang =
        #{request.locale,jdbcType=VARCHAR,javaType=java.lang.String})
        WHERE mm.joint_site_type = 'DSIS'
        AND to_char(sao.sales_org_id) = mm.joint_site)
        ELSE
        mm.joint_site_type
        END) joint_site_name,
        coalesce((SELECT 'Y'
        FROM mm_member mmt
        WHERE mmt.member_code = concat(mm.member_code, '_T')),
        'N') has_change_ownership_temp
        FROM mm_member_v mm
        LEFT OUTER JOIN mm_sponsor_v sponsor
        ON (mm.sponsor_no = sponsor.sponsor_no)
        LEFT OUTER JOIN omk.gds_dealer_ref_chn omkgdrc
        ON (omkgdrc.dealer_no = mm.sponsor_no)
        WHERE mm.member_id = #{memberId,jdbcType=DECIMAL}
    </select>

    <select id="selectMembers" resultMap="BaseResultMap" parameterType="com.lkkhpg.dsis.common.member.dto.Member">
        SELECT mm.member_id,
        mm.member_type,
        mm.market_id,
        mm.company_id,
        mm.member_role,
        mm.status,
        mm.remark,
        mm.br_number,
        mm.ref_company,
        mm.english_name,
        mm.chinese_name,
        mm.member_name,
        mm.gender,
        mm.dob,
        mm.id_type,
        mm.id_number,
        mm.nationality,
        mm.country,
        mm.language,
        mm.race,
        mm.education,
        mm.citizen_type,
        mm.nhi_tax_excluded,
        mm.gst_id_number,
        mm.ad_opt_in,
        mm.sys_msg_in,
        mm.joint_site_type,
        mm.joint_site,
        mm.joint_date,
        mm.approval_date,
        mm.sponsor_id,
        mm.accept_bonus,
        mm.object_version_number,
        mm.request_id,
        mm.program_id,
        mm.creation_date,
        mm.created_by,
        mm.last_updated_by,
        mm.last_update_date,
        mm.last_update_login,
        mm.attribute_category,
        mm.attribute1,
        mm.attribute2,
        mm.attribute3,
        mm.attribute4,
        mm.attribute5,
        mm.attribute6,
        mm.attribute7,
        mm.attribute8,
        mm.attribute9,
        mm.attribute10,
        mm.attribute11,
        mm.attribute12,
        mm.attribute13,
        mm.attribute14,
        mm.attribute15,
        mm.SALES_ORGANIZATION,
        mm.sales_org_id,
        mm.member_code,
        mm.area_code,
        mm.phone_no,
        mm.other_area_code,
        mm.oth_phone_no,
        mm.email,
        mm.warning_msg,
        mm.travel_plan_month,
        mm.sync_flag,
        mm.bonus_rcv_method,
        mm.termination_date,
        mm.ref_company_en,
        (SELECT scvb.meaning
        FROM sys_code_b scb,
        sys_code_value_b scvb
        LEFT OUTER JOIN sys_code_value_tl scvt
        ON (scvb.code_value_id = scvt.code_value_id AND scvt.lang =
        #{request.locale,jdbcType=VARCHAR,javaType=java.lang.String})
        WHERE scb.code = 'MM.MEMBER_STATUS'
        AND scb.code_id = scvb.code_id
        AND scvb.value = mm.status) status_desc,
        (SELECT coalesce(smt.name, sm.name)
        FROM spm_market_b sm
        LEFT OUTER JOIN spm_market_tl smt
        ON (sm.market_id = smt.market_id AND smt.lang = #{request.locale,jdbcType=VARCHAR,javaType=java.lang.String})
        WHERE mm.market_id = sm.market_id) market_name,
        (SELECT sc.name
        FROM spm_company_b sc
        LEFT OUTER JOIN spm_company_tl sct
        ON (sc.company_id = sct.company_id AND sct.lang = #{request.locale,jdbcType=VARCHAR,javaType=java.lang.String})
        WHERE mm.company_id = sc.company_id) company_name,
        mm.sponsor_no,
        sponsor.sponsor_english_name,
        sponsor.sponsor_chinese_name
        FROM mm_member_v mm
        LEFT OUTER JOIN mm_sponsor_v sponsor
        ON (coalesce(mm.sponsor_id, -999) = coalesce(sponsor.member_id, -999) AND
        mm.sponsor_no = sponsor.sponsor_no)
        <where>
            <if test="marketId != null">
                mm.MARKET_ID = #{marketId,jdbcType=DECIMAL}
            </if>
            <if test="marketId == null">
                mm.MARKET_ID = #{request.marketId,jdbcType=DECIMAL}
            </if>
            <if test="memberId != null">
                AND mm.member_id = #{memberId,jdbcType=DECIMAL}
            </if>
            <if test="memberId == null and memberCode != null">
                AND mm.member_code like concat('%',concat(#{memberCode,jdbcType=VARCHAR},'%'))
            </if>
            <if test="memberId == null and englishName != null">
                AND mm.english_name = #{englishName,jdbcType=VARCHAR}
            </if>
            <if test="memberId == null and chineseName != null">
                AND mm.chinese_name = #{chineseName,jdbcType=VARCHAR}
            </if>
            <if test="memberId == null and phoneNo != null">
                and (mm.PHONE_NO = #{phoneNo,jdbcType=VARCHAR} or mm.OTH_PHONE_NO = #{phoneNo,jdbcType=VARCHAR})
            </if>
            <if test="memberId == null and registerCode != null">
                and (mm.BR_NUMBER = #{registerCode,jdbcType=VARCHAR} or mm.ID_NUMBER = #{registerCode,jdbcType=VARCHAR}
                or
                mm.member_id IN
                (SELECT member_id
                FROM MM_MEM_RELATIONSHIP rel
                WHERE rel.rel_type = 'SPOUS'
                AND rel.ID_NUMBER = #{registerCode,jdbcType=VARCHAR})
                )
            </if>
            <if test="memberId == null and memberName != null">
                AND (
                mm.chinese_name like concat('%',concat(#{memberName,jdbcType=VARCHAR},'%'))
                OR upper(mm.english_name) like concat('%',concat(upper(#{memberName,jdbcType=VARCHAR}),'%'))
                OR mm.member_id in
                (select rel.member_id from MM_MEM_RELATIONSHIP rel
                where (rel.chinese_name like concat('%', concat(#{memberName,jdbcType=VARCHAR}, '%'))
                or upper(rel.english_name) like
                concat('%', concat(upper(#{memberName,jdbcType=VARCHAR}), '%')))
                and rel.REL_TYPE = 'SPOUS'
                and mm.member_id = rel.member_id
                )
                )
            </if>
            <if test="memberId == null and marketId != null">
                AND mm.market_id = #{marketId,jdbcType=DECIMAL}
            </if>
            <if test="memberId == null and status != null">
                AND mm.status = #{status,jdbcType=DECIMAL}
            </if>
        </where>
        <if test="sortname != null">
            <bind name='_colName' value='@com.lkkhpg.dsis.platform.util.CommonUtils@toColumnName(sortname)'/>
            ORDER BY ${_colName} ${sortorder}
        </if>
    </select>
    <!-- 挑库页面查询会员 -->
    <select id="selectMembersForPick" resultMap="BaseResultMap"
            parameterType="com.lkkhpg.dsis.common.member.dto.Member">
        SELECT mm.member_id,
        mm.member_type,
        mm.market_id,
        mm.company_id,
        mm.member_role,
        mm.status,
        mm.remark,
        mm.br_number,
        mm.ref_company,
        mm.english_name,
        mm.chinese_name,
        mm.member_name,
        mm.gender,
        mm.dob,
        mm.id_type,
        mm.id_number,
        mm.nationality,
        mm.country,
        mm.language,
        mm.race,
        mm.education,
        mm.citizen_type,
        mm.nhi_tax_excluded,
        mm.gst_id_number,
        mm.ad_opt_in,
        mm.sys_msg_in,
        mm.joint_site_type,
        mm.joint_site,
        mm.joint_date,
        mm.approval_date,
        mm.sponsor_id,
        mm.accept_bonus,
        mm.object_version_number,
        mm.request_id,
        mm.program_id,
        mm.creation_date,
        mm.created_by,
        mm.last_updated_by,
        mm.last_update_date,
        mm.last_update_login,
        mm.attribute_category,
        mm.attribute1,
        mm.attribute2,
        mm.attribute3,
        mm.attribute4,
        mm.attribute5,
        mm.attribute6,
        mm.attribute7,
        mm.attribute8,
        mm.attribute9,
        mm.attribute10,
        mm.attribute11,
        mm.attribute12,
        mm.attribute13,
        mm.attribute14,
        mm.attribute15,
        mm.SALES_ORGANIZATION,
        mm.sales_org_id,
        mm.member_code,
        mm.area_code,
        mm.phone_no,
        mm.other_area_code,
        mm.oth_phone_no,
        mm.email,
        mm.warning_msg,
        mm.travel_plan_month,
        mm.sync_flag,
        mm.bonus_rcv_method,
        mm.termination_date,
        mm.ref_company_en,
        (SELECT scvb.meaning
        FROM sys_code_b scb,
        sys_code_value_b scvb
        LEFT OUTER JOIN sys_code_value_tl scvt
        ON (scvb.code_value_id = scvt.code_value_id AND scvt.lang =
        #{request.locale,jdbcType=VARCHAR,javaType=java.lang.String})
        WHERE scb.code = 'MM.MEMBER_STATUS'
        AND scb.code_id = scvb.code_id
        AND scvb.value = mm.status) status_desc,
        (SELECT coalesce(smt.name, sm.name)
        FROM spm_market_b sm
        LEFT OUTER JOIN spm_market_tl smt
        ON (sm.market_id = smt.market_id AND smt.lang = #{request.locale,jdbcType=VARCHAR,javaType=java.lang.String})
        WHERE mm.market_id = sm.market_id) market_name,
        (SELECT sc.name
        FROM spm_company_b sc
        LEFT OUTER JOIN spm_company_tl sct
        ON (sc.company_id = sct.company_id AND sct.lang = #{request.locale,jdbcType=VARCHAR,javaType=java.lang.String})
        WHERE mm.company_id = sc.company_id) company_name,
        mm.sponsor_no,
        sponsor.sponsor_english_name,
        sponsor.sponsor_chinese_name
        FROM mm_member_v mm
        LEFT OUTER JOIN mm_sponsor_v sponsor
        ON (coalesce(mm.sponsor_id, -999) = coalesce(sponsor.member_id, -999) AND
        mm.sponsor_no = sponsor.sponsor_no)
        <where>
            mm.MARKET_ID in ( SELECT
            MARKET_ID
            FROM
            SYS_USER_ROLE_ASSIGN s
            INNER JOIN (
            SELECT
            sales_org_id org_id,
            'SALES' org_type,
            enabled_flag,
            end_active_date,
            MARKET_ID
            FROM
            spm_sales_organization_b
            WHERE
            enabled_flag = 'Y'
            AND (
            end_active_date IS NULL
            OR end_active_date > CURRENT_TIMESTAMP
            )
            ) b ON s.assign_type = b.org_type
            AND s.assign_value = b.org_id
            WHERE
            (USER_ID = #{request.userId,jdbcType=DECIMAL} AND ROLE_ID = #{request.roleId,jdbcType=DECIMAL}) )

            <if test="memberId != null">
                AND mm.member_id = #{memberId,jdbcType=DECIMAL}
            </if>
            <if test="memberId == null and memberCode != null">
                AND mm.member_code like concat('%',concat(#{memberCode,jdbcType=VARCHAR},'%'))
            </if>
            <if test="memberId == null and englishName != null">
                AND mm.english_name = #{englishName,jdbcType=VARCHAR}
            </if>
            <if test="memberId == null and chineseName != null">
                AND mm.chinese_name = #{chineseName,jdbcType=VARCHAR}
            </if>
            <if test="memberId == null and phoneNo != null">
                and (mm.PHONE_NO = #{phoneNo,jdbcType=VARCHAR} or mm.OTH_PHONE_NO = #{phoneNo,jdbcType=VARCHAR})
            </if>
            <if test="memberId == null and registerCode != null">
                and (mm.BR_NUMBER = #{registerCode,jdbcType=VARCHAR} or mm.ID_NUMBER = #{registerCode,jdbcType=VARCHAR}
                or
                mm.member_id IN
                (SELECT member_id
                FROM MM_MEM_RELATIONSHIP rel
                WHERE rel.rel_type = 'SPOUS'
                AND rel.ID_NUMBER = #{registerCode,jdbcType=VARCHAR})
                )
            </if>
            <if test="memberId == null and memberName != null">
                AND (
                mm.chinese_name like concat('%',concat(#{memberName,jdbcType=VARCHAR},'%'))
                OR upper(mm.english_name) like concat('%',concat(upper(#{memberName,jdbcType=VARCHAR}),'%'))
                OR mm.member_id in
                (select rel.member_id from MM_MEM_RELATIONSHIP rel
                where (rel.chinese_name like concat('%', concat(#{memberName,jdbcType=VARCHAR}, '%'))
                or upper(rel.english_name) like
                concat('%', concat(upper(#{memberName,jdbcType=VARCHAR}), '%')))
                and rel.REL_TYPE = 'SPOUS'
                and mm.member_id = rel.member_id
                )
                )
            </if>
            <if test="memberId == null and marketId != null">
                AND mm.market_id = #{marketId,jdbcType=DECIMAL}
            </if>
            <if test="memberId == null and status != null">
                AND mm.status = #{status,jdbcType=DECIMAL}
            </if>
        </where>
        <if test="sortname != null">
            <bind name='_colName' value='@com.lkkhpg.dsis.platform.util.CommonUtils@toColumnName(sortname)'/>
            ORDER BY ${_colName} ${sortorder}
        </if>
    </select>
    <select id="selectMembersByMemberCode" resultMap="BaseResultMap" parameterType="java.lang.String">
        SELECT
        <include refid="Base_Column_List"/>
        FROM mm_member_v mm
        WHERE mm.member_code = #{memberCode,jdbcType=VARCHAR}
    </select>

    <select id="selectValidMemberByMemberCode" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM mm_member_v mm
        WHERE mm.member_code = #{memberCode,jdbcType=VARCHAR}
        AND mm.status NOT IN ('TERM', 'ATERM', 'WCHG')
        <if test="marketId != null">
            AND mm.market_id = #{marketId,jdbcType=DECIMAL}
        </if>
        <if test="marketId == null">
            AND mm.market_id = #{request.marketId,jdbcType=DECIMAL}
        </if>
    </select>

    <select id="selectValidMembers" resultMap="BaseResultMap" parameterType="com.lkkhpg.dsis.common.member.dto.Member">
        SELECT
        <include refid="Base_Column_List"/>
        FROM mm_member_v mm
        WHERE mm.status NOT IN ('TERM', 'ATERM', 'WCHG')
        <if test="memberId != null">
            AND mm.member_id = #{memberId,jdbcType=DECIMAL}
        </if>
        <if test="memberCode != null">
            AND mm.member_code = #{memberCode,jdbcType=VARCHAR}
        </if>
        <if test="marketId != null">
            and mm.market_Id = #{marketId,jdbcType=DECIMAL}
        </if>
        <if test="companyId != null">
            and mm.company_Id = #{companyId,jdbcType=DECIMAL}
        </if>
        <if test="salesOrgId != null">
            and mm.sales_org_id = #{salesOrgId,jdbcType=DECIMAL}
        </if>
        <if test="memberRole != null">
            and mm.member_role = #{memberRole,jdbcType=VARCHAR}
        </if>
    </select>

    <!-- 获取一年前的有效会员 -->
    <select id="selectYearAgoValidMembers" resultMap="BaseResultMap"
            parameterType="com.lkkhpg.dsis.common.member.dto.Member">
        SELECT
        <include refid="Base_Column_List"/>
        FROM mm_member_v mm
        WHERE mm.status NOT IN ('TERM', 'ATERM', 'WCHG')
        AND mm.approval_date &lt; add_months(current_date, -12)
        <if test="memberId != null">
            AND mm.member_id = #{memberId,jdbcType=DECIMAL}
        </if>
        <if test="memberCode != null">
            AND mm.member_code = #{memberCode,jdbcType=VARCHAR}
        </if>
        <if test="marketId != null">
            and mm.market_Id = #{marketId,jdbcType=DECIMAL}
        </if>
        <if test="companyId != null">
            and mm.company_Id = #{companyId,jdbcType=DECIMAL}
        </if>
        <if test="salesOrgId != null">
            and mm.sales_org_id = #{salesOrgId,jdbcType=DECIMAL}
        </if>
    </select>

    <!-- 更新会员状态会员 mclin 修改，添加member.前缀-->
    <update id="updateStatusByMemberId">
        update MM_MEMBER
        set STATUS = #{member.status, jdbcType=VARCHAR},
        SYNC_FLAG = 'N',
        DAPP_SYNC_FLAG = 'N',
        OBJECT_VERSION_NUMBER = OBJECT_VERSION_NUMBER + 1,
        REQUEST_ID = #{member.requestId,jdbcType=DECIMAL},
        PROGRAM_ID = #{member.programId,jdbcType=DECIMAL},
        LAST_UPDATED_BY = #{member.lastUpdatedBy,jdbcType=DECIMAL},
        LAST_UPDATE_DATE = CURRENT_TIMESTAMP,
        LAST_UPDATE_LOGIN = #{member.lastUpdateLogin,jdbcType=DECIMAL}
        where MEMBER_ID = #{member.memberId,jdbcType=DECIMAL}
    </update>

    <select id="changeMemberSelect" resultMap="BaseResultMap" parameterType="com.lkkhpg.dsis.common.member.dto.Member">
        select MEMBER_ID,STATUS,ENGLISH_NAME,
        CHINESE_NAME, PHONE_NO,
        OTH_PHONE_NO, EMAIL, MEMBER_CODE
        from mm_member_v t
        <where>
            <if test="marketId != null">
                t.MARKET_ID = #{marketId,jdbcType=DECIMAL}
            </if>
            <if test="marketId == null">
                t.MARKET_ID = #{request.marketId,jdbcType=DECIMAL}
            </if>
            <if test="memberCode != null">
                and t.MEMBER_CODE = #{memberCode,jdbcType=VARCHAR}
            </if>
            <if test="englishName != null">
                AND ( (upper(t.english_name) like upper( concat('%',concat( #{englishName,jdbcType=VARCHAR},'%' )) )
                OR t.member_id in
                ( select member_id from MM_MEM_RELATIONSHIP rel
                <where>
                    rel.rel_type = 'SPOUS' AND (
                    rel.chinese_name like concat('%',concat(#{chineseName,jdbcType=VARCHAR},'%'))
                    OR upper(rel.english_name) like concat('%',concat(upper(#{englishName,jdbcType=VARCHAR}),'%'))
                    )
                </where>
                )
                )
            </if>
            <if test="chineseName != null">
                OR ( t.chinese_name like concat('%',concat( #{chineseName,jdbcType=VARCHAR},'%' ))
                OR t.member_id in
                ( select member_id from MM_MEM_RELATIONSHIP rel
                <where>
                    rel.rel_type = 'SPOUS' AND (
                    rel.chinese_name like concat('%',concat(#{chineseName,jdbcType=VARCHAR},'%'))
                    OR upper(rel.english_name) like concat('%',concat(upper(#{englishName,jdbcType=VARCHAR}),'%'))
                    )
                </where>
                )
                )
                )
            </if>
            <if test="brNumber != null">
                AND ( t.br_number = #{brNumber,jdbcType=VARCHAR}
            </if>
            <if test="idNumber != null">
                OR t.id_number = #{idNumber,jdbcType=VARCHAR}
                OR t.member_id in (
                select member_id from mm_mem_relationship r where r.rel_type='SPOUS'
                AND r.id_number=#{idNumber,jdbcType=VARCHAR})
                )
            </if>
            <if test="phoneNo != null">
                AND ( t.phone_no = #{phoneNo,jdbcType=VARCHAR}
            </if>
            <if test="othPhoneNo != null">
                OR t.oth_phone_no = #{othPhoneNo,jdbcType=VARCHAR} )
            </if>
        </where>
    </select>

    <!-- service center 会员查询  -->
    <select id='selectMemberServiceCenter' resultMap="BaseResultMap"
            parameterType="com.lkkhpg.dsis.common.member.dto.Member">
        select t.MEMBER_ID,
        t.STATUS,
        t.ENGLISH_NAME,
        t.CHINESE_NAME,
        t.PHONE_NO,
        t.OTH_PHONE_NO,
        t.EMAIL,
        t.MEMBER_CODE
        from mm_member_v t
        <where>
            t.MEMBER_ID not in
            (select sa.MEMBER_ID from spm_service_center_assign sa)
            and t.MEMBER_ID not in
            (select sc.charge_member_id from spm_service_center sc)
            and t.status = 'ACTV'
            and t.market_id = #{marketId,jdbcType=DECIMAL}
            <if test="memberCode != null">
                AND Upper(t.MEMBER_CODE) like concat('%',concat(Upper(#{memberCode,jdbcType=VARCHAR}),'%'))
            </if>
            <if test="englishName != null">
                AND Upper(t.ENGLISH_NAME) like concat('%',concat(Upper(#{englishName,jdbcType=VARCHAR}),'%'))
            </if>
            <if test="chineseName != null">
                AND Upper(t.CHINESE_NAME) like concat('%',concat(Upper(#{chineseName,jdbcType=VARCHAR}),'%'))
            </if>
            <if test="phoneNo != null">
                AND Upper(t.PHONE_NO) like concat('%',concat(Upper(#{phoneNo,jdbcType=VARCHAR}),'%'))
            </if>
        </where>
        <if test="sortname != null">
            <bind name='_colName' value='@com.lkkhpg.dsis.platform.util.CommonUtils@toColumnName(sortname)'/>
            ORDER BY ${_colName} ${sortorder}
        </if>

    </select>

    <!-- 活动lov 会员查询 -->
    <select id='selectEventMember' resultMap="BaseResultMap" parameterType="com.lkkhpg.dsis.common.member.dto.Member">
        select t.MEMBER_ID,
        t.STATUS,
        t.ENGLISH_NAME,
        t.CHINESE_NAME,
        t.MEMBER_NAME,
        t.PHONE_NO,
        t.OTH_PHONE_NO,
        t.EMAIL,
        t.MEMBER_CODE,
        (SELECT scvb.meaning
        FROM sys_code_b scb,
        sys_code_value_b scvb
        LEFT OUTER JOIN sys_code_value_tl scvt
        ON (scvb.code_value_id = scvt.code_value_id AND scvt.lang =
        #{request.locale,jdbcType=VARCHAR,javaType=java.lang.String})
        WHERE scb.code = 'MM.MEMBER_STATUS'
        AND scb.code_id = scvb.code_id
        AND scvb.value = t.status) status_desc
        from mm_member_v t
        <where>
            t.status in ('ACTV','NEW','PEND')
            and t.market_id = #{marketId,jdbcType=DECIMAL}
            <if test="memberCode != null">
                AND t.member_code like
                concat('%',concat(#{memberCode,jdbcType=VARCHAR},'%'))
            </if>
            <if test="englishName != null">
                AND t.english_name = #{englishName,jdbcType=VARCHAR}
            </if>
            <if test="chineseName != null">
                AND t.chinese_name = #{chineseName,jdbcType=VARCHAR}
            </if>
            <if test="phoneNo != null">
                and (t.PHONE_NO = #{phoneNo,jdbcType=VARCHAR} or t.OTH_PHONE_NO =
                #{phoneNo,jdbcType=VARCHAR})
            </if>
        </where>
        <if test="sortname != null">
            <bind name='_colName' value='@com.lkkhpg.dsis.platform.util.CommonUtils@toColumnName(sortname)'/>
            ORDER BY ${_colName} ${sortorder}
        </if>

    </select>

    <!-- 根据推荐人ID查询下线树 -->
    <select id="selectBySponsorId" resultMap="BaseResultMap" parameterType="java.lang.Long">
        SELECT
        <include refid="Base_Column_List"/>,
        (SELECT scvb.meaning
        FROM sys_code_b scb,
        sys_code_value_b scvb
        WHERE scb.code = 'MM.MEMBER_STATUS'
        AND scb.code_id = scvb.code_id
        AND scvb.value = mm.status) status_desc,
        (SELECT mmd.deadline
        FROM mm_member_deadline_v mmd
        WHERE mmd.member_id = mm.member_id) deadline
        FROM mm_member_v mm
        WHERE mm.sponsor_id = #{sponsorId, jdbcType = DECIMAL}
    </select>

    <select id="selectSponsorId" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select MEMBER_ID,sponsor_No,SPONSOR_ID,STATUS,MEMBER_CODE
        from mm_member_v
        where MEMBER_ID = #{memberId,jdbcType=VARCHAR}
    </select>

    <select id="selectMarketId" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select MEMBER_ID,MARKET_ID,STATUS,MEMBER_CODE
        from mm_member_v
        where MEMBER_ID = #{memberId,jdbcType=DECIMAL}
    </select>

    <!-- 新会员审核界面查询 -->
    <select id="selectExamineMembers" resultMap="BaseResultMap"
            parameterType="com.lkkhpg.dsis.common.member.dto.Member">
        SELECT
        <include refid="Base_Column_List"/>,mm.member_name,
        (SELECT coalesce(smt.name, sm.name)
        FROM spm_market_b sm
        LEFT OUTER JOIN spm_market_tl smt
        ON (sm.market_id = smt.market_id AND smt.lang = #{request.locale,jdbcType=VARCHAR,javaType=java.lang.String})
        WHERE mm.market_id = sm.market_id) market_name,
        (SELECT sao.code
        FROM spm_sales_organization_b sao
        WHERE mm.joint_site_type = 'DSIS'
        AND to_char(sao.sales_org_id) = mm.joint_site) joint_site_code
        FROM mm_member_v mm
        <where>
            <if test="marketId != null">
                mm.market_id = #{marketId,jdbcType=DECIMAL}
            </if>
            <if test="marketId == null">
                mm.market_id = #{request.marketId,jdbcType=DECIMAL}
            </if>
            and mm.STATUS = 'PEND'
            <if test="memberCode != null">
                AND mm.MEMBER_CODE = #{memberCode,jdbcType=VARCHAR}
            </if>
            <if test="memberId !=null">
                and mm.MEMBER_ID = #{memberId,jdbcType=DECIMAL}
            </if>
            <if test="memberId == null and memberName != null">
                AND (
                <!-- mm.chinese_name like concat('%',concat(#{memberName,jdbcType=VARCHAR},'%'))
                        OR upper(mm.english_name) like concat('%',concat(upper(#{memberName,jdbcType=VARCHAR}),'%')) -->
                mm.member_name like concat('%', concat(#{memberName,jdbcType=VARCHAR},'%'))
                OR exists
                (select 'X' from MM_MEM_RELATIONSHIP rel
                where (rel.chinese_name like concat('%', concat(#{memberName,jdbcType=VARCHAR}, '%'))
                or upper(rel.english_name) like
                concat('%', concat(upper(#{memberName,jdbcType=VARCHAR}), '%')))
                and rel.REL_TYPE = 'SPOUS'
                and mm.member_id = rel.member_id
                )
                )
            </if>
            <if test="phoneNo != null">
                AND (mm.phone_no = #{phoneNo,jdbcType=VARCHAR}
                OR mm.oth_phone_no = #{phoneNo,jdbcType=VARCHAR})
            </if>
            <if test="registNumber != null">
                AND (
                mm.br_number = #{registNumber, jdbcType = VARCHAR}
                OR mm.id_number = #{registNumber, jdbcType = VARCHAR}
                OR exists
                (
                select 'X'
                from MM_MEM_RELATIONSHIP rel
                where rel.id_number = #{registNumber, jdbcType = VARCHAR}
                and rel.REL_TYPE = 'SPOUS'
                and mm.member_id = rel.member_id)
                )
            </if>
        </where>
        <if test="sortname =='memberCode' and sortorder == 'asc'">
            order by MEMBER_CODE asc
        </if>
        <if test="sortname =='memberCode' and sortorder == 'desc'">
            order by MEMBER_CODE desc
        </if>
        <if test="sortname =='jointDate' and sortorder == 'asc'">
            order by JOINT_DATE asc
        </if>
        <if test="sortname =='jointDate' and sortorder == 'desc'">
            order by JOINT_DATE desc
        </if>
    </select>

    <!-- 新会员审核 -->
    <update id="examineMember">
        update MM_MEMBER
        set STATUS = #{newStatus, jdbcType=VARCHAR},
        APPROVAL_DATE = CURRENT_TIMESTAMP,
        SYNC_FLAG = 'N',
        DAPP_SYNC_FLAG = 'N',
        OBJECT_VERSION_NUMBER = OBJECT_VERSION_NUMBER + 1,
        REQUEST_ID = #{member.requestId,jdbcType=DECIMAL},
        PROGRAM_ID = #{member.programId,jdbcType=DECIMAL},
        LAST_UPDATED_BY = #{member.lastUpdatedBy,jdbcType=DECIMAL},
        LAST_UPDATE_DATE = CURRENT_TIMESTAMP,
        LAST_UPDATE_LOGIN = #{member.lastUpdateLogin,jdbcType=DECIMAL}
        where MEMBER_ID = #{member.memberId,jdbcType=DECIMAL} AND STATUS = 'PEND'
    </update>

    <!-- 提交会员 -->
    <update id="updateStatusForNew">
        update MM_MEMBER
        set STATUS = #{status, jdbcType=VARCHAR},
        SYNC_FLAG = 'N',
        DAPP_SYNC_FLAG = 'N',
        OBJECT_VERSION_NUMBER = OBJECT_VERSION_NUMBER + 1,
        REQUEST_ID = #{requestId,jdbcType=DECIMAL},
        PROGRAM_ID = #{programId,jdbcType=DECIMAL},
        LAST_UPDATED_BY = #{lastUpdatedBy,jdbcType=DECIMAL},
        LAST_UPDATE_DATE = CURRENT_TIMESTAMP,
        LAST_UPDATE_LOGIN = #{lastUpdateLogin,jdbcType=DECIMAL}
        where MEMBER_ID = #{memberId,jdbcType=DECIMAL} AND STATUS IN ('NEW', 'RJECT')
    </update>

    <select id="queryMembers" resultMap="BaseResultMap" parameterType="java.util.Map">
        select (SELECT coalesce(smt.name, sm.name)
        FROM spm_market_b sm
        LEFT OUTER JOIN spm_market_tl smt
        ON (sm.market_id = smt.market_id AND smt.lang = #{request.locale,jdbcType=VARCHAR,javaType=java.lang.String})
        WHERE m.market_id = sm.market_id) market_name,
        s.SPONSOR_NAME, omk.DEALER_POST_CODE,
        m.MEMBER_ID, m.MEMBER_TYPE, m.COMPANY_ID, m.MEMBER_ROLE,
        m.STATUS,
        m.REMARK, m.BR_NUMBER, m.MARKET_ID,
        m.REF_COMPANY, m.MEMBER_NAME, m.GENDER, m.DOB, m.ID_TYPE, m.ID_NUMBER, m.NATIONALITY,
        m.COUNTRY, m.LANGUAGE, m.RACE, m.EDUCATION, m.CITIZEN_TYPE, m.NHI_TAX_EXCLUDED, m.GST_ID_NUMBER,
        m.AD_OPT_IN, m.SYS_MSG_IN, m.JOINT_SITE, m.JOINT_DATE, m.APPROVAL_DATE, m.SPONSOR_ID, m.SPONSOR_NO,
        m.ACCEPT_BONUS,
        m.OBJECT_VERSION_NUMBER, m.REQUEST_ID, m.PROGRAM_ID, m.CREATION_DATE, m.CREATED_BY, m.LAST_UPDATED_BY,
        m.LAST_UPDATE_DATE, m.LAST_UPDATE_LOGIN, m.ATTRIBUTE_CATEGORY, m.ATTRIBUTE1, m.ATTRIBUTE2,
        m.ATTRIBUTE3, m.ATTRIBUTE4, m.ATTRIBUTE5, m.ATTRIBUTE6, m.ATTRIBUTE7, m.ATTRIBUTE8, m.ATTRIBUTE9,
        m.ATTRIBUTE10, m.ATTRIBUTE11, m.ATTRIBUTE12, m.ATTRIBUTE13, m.ATTRIBUTE14,m.ATTRIBUTE15 ,m.SALES_ORGANIZATION,
        m.SALES_ORG_ID,
        m.MEMBER_CODE, m.AREA_CODE, decode(AREA_CODE,NULL,PHONE_NO,AREA_CODE || '-' || PHONE_NO) PHONE_NO,
        m.OTHER_AREA_CODE,
        m.OTH_PHONE_NO, m.EMAIL, m.WARNING_MSG, m.TRAVEL_PLAN_MONTH, m.SYNC_FLAG, ssot.NAME joint_site_name
        from MM_MEMBER_V M
        LEFT JOIN MM_SPONSOR_V s
        ON M.SPONSOR_ID = s.MEMBER_ID
        LEFT JOIN OMK.OMK_RTL_SALARY_BALANCE omk
        ON M.MEMBER_CODE = omk.DEALER_NO
        LEFT JOIN spm_sales_organization_tl ssot
        ON (M.JOINT_SITE = ssot.SALES_ORG_ID AND ssot.lang =
        #{request.locale,jdbcType=VARCHAR,javaType=java.lang.String})
        <where>
            <if test="marketId != null">
                and m.MARKET_ID = #{marketId,jdbcType=DECIMAL}
            </if>
            <if test="marketId == null">
                and m.MARKET_ID = #{request.marketId,jdbcType=DECIMAL}
            </if>
            <if test="memberCode != null">
                and m.MEMBER_CODE like concat('%', concat(#{memberCode,jdbcType=VARCHAR}, '%'))
            </if>
            <if test="memberId !=null">
                and m.MEMBER_ID = #{memberId,jdbcType=DECIMAL}
            </if>
            <if test="memberId == null and memberName != null">
                and ((upper(m.english_name) LIKE upper(concat('%', concat(#{memberName,jdbcType=VARCHAR}, '%'))) OR
                m.member_id IN
                (SELECT member_id
                FROM MM_MEM_RELATIONSHIP rel
                WHERE rel.rel_type = 'SPOUS'
                AND (rel.chinese_name LIKE concat('%', concat(#{memberName,jdbcType=VARCHAR}, '%')) OR
                upper(rel.english_name) LIKE
                concat('%', concat(upper(#{memberName,jdbcType=VARCHAR}), '%'))))) OR
                (m.chinese_name LIKE concat('%', concat(#{memberName,jdbcType=VARCHAR}, '%')) OR
                m.member_id IN
                (SELECT member_id
                FROM MM_MEM_RELATIONSHIP rel
                WHERE rel.rel_type = 'SPOUS'
                AND (rel.chinese_name LIKE concat('%', concat(#{memberName,jdbcType=VARCHAR}, '%')) OR
                upper(rel.english_name) LIKE
                concat('%', concat(upper(#{memberName,jdbcType=VARCHAR}), '%')))))
                or (
                upper(m.member_name) LIKE upper(concat('%', concat(#{memberName,jdbcType=VARCHAR}, '%')))
                )
                )
            </if>
            <if test="phoneNo != null">
                and (m.PHONE_NO like concat('%', concat(#{phoneNo,jdbcType=VARCHAR}, '%')) or m.OTH_PHONE_NO like
                concat('%', concat(#{phoneNo,jdbcType=VARCHAR}, '%')))
            </if>
            <if test="registerCode != null">
                and (m.BR_NUMBER like concat('%', concat(#{registerCode,jdbcType=VARCHAR}, '%')) or m.ID_NUMBER like
                concat('%', concat(#{registerCode,jdbcType=VARCHAR}, '%')) or
                m.member_id IN
                (SELECT member_id
                FROM MM_MEM_RELATIONSHIP rel
                WHERE rel.rel_type = #{relationShip,jdbcType=VARCHAR}
                AND rel.ID_NUMBER = #{registerCode,jdbcType=VARCHAR})
                )
            </if>
            <if test="month != null">
                and to_char(m.dob,'mm') = #{month,jdbcType=VARCHAR}
            </if>
            <if test="yearFrom != null">
                and to_char(m.dob,'yyyy') >= #{yearFrom,jdbcType=VARCHAR}
            </if>
            <if test="yearTo != null">
                and to_char(m.dob,'yyyy') <![CDATA[<]]>= #{yearTo,jdbcType=VARCHAR}
            </if>
            <if test="isActive !=null">
                and m.MEMBER_ID not in (select MEMBER_ID from MM_MEM_STATUS_CHANGE where OPERATION_TYPE='TERM' AND
                APPROVAL_STATUS!='F')
                and m.STATUS not in ('RJECT','SUPSE','TERM','ATERM', 'WCHG')
            </if>
            <if test="chineseName !=null">
                AND m.CHINESE_NAME LIKE concat('%', concat(#{chineseName,jdbcType=VARCHAR}, '%'))
            </if>
            <if test="englishName !=null">
                AND m.ENGLISH_NAME LIKE concat('%', concat(#{englishName,jdbcType=VARCHAR}, '%'))
            </if>
            <if test="status !=null">
                AND m.STATUS = #{status,jdbcType=VARCHAR}
            </if>
            <if test="jointDate !=null">
                AND m.JOINT_DATE = #{jointDate,jdbcType=TIMESTAMP}
            </if>
            <if test="userType =='IPONT'">
                AND TRUNC(m.JOINT_DATE) = TRUNC(current_date)
                and m.joint_site = to_char(#{request.salesOrgId,jdbcType=DECIMAL})
            </if>
            <if test="jointSiteName !=null">
                AND (ssot.NAME like concat('%', concat(#{jointSiteName,jdbcType=VARCHAR}, '%')))
            </if>
            <if test="salesOrgId !=null">
                AND ssot.SALES_ORG_ID = #{salesOrgId,jdbcType=TIMESTAMP}
            </if>
            <if test="sponsorNo != null">
                and (m.SPONSOR_NO like concat('%', concat(#{sponsorNo,jdbcType=VARCHAR}, '%')))
            </if>

            <if test="sponsorName != null">
                and (upper(s.SPONSOR_ENGLISH_NAME) like upper(concat('%', concat(#{sponsorName,jdbcType=VARCHAR}, '%')))
                or s.SPONSOR_CHINESE_NAME like concat('%', concat(#{sponsorName,jdbcType=VARCHAR}, '%')))
            </if>

            <if test="jointDateFrom != null">
                and TRUNC(m.JOINT_DATE) <![CDATA[ >= #{jointDateFrom,jdbcType=TIMESTAMP} ]]>
            </if>
            <if test="jointDateTo != null">
                and TRUNC(m.JOINT_DATE) <![CDATA[ <= #{jointDateTo,jdbcType=TIMESTAMP} ]]>
            </if>
            <if test="roleList != null">
                and m.MEMBER_ROLE in
                <foreach collection="roleList" open="(" separator="," close=")" item="role" index="index">
                    #{role,jdbcType=VARCHAR}
                </foreach>
            </if>
            <if test="rank != null">
                and omk.DEALER_POST_CODE = #{rank,jdbcType=INTEGER}
            </if>
            <if test="idNumber != null">
                and m.ID_NUMBER = #{idNumber,jdbcType=VARCHAR}
            </if>
        </where>
        <if test="sortname =='memberCode' and sortorder == 'asc'">
            order by m.MEMBER_CODE asc
        </if>
        <if test="sortname =='memberName' and sortorder == 'asc'">
            order by m.MEMBER_NAME asc
        </if>
        <if test="sortname =='marketName' and sortorder == 'asc'">
            order by market_name asc
        </if>
        <if test="sortname =='email' and sortorder == 'asc'">
            order by m.EMAIL asc
        </if>
        <if test="sortname =='phoneNo' and sortorder == 'asc'">
            order by m.PHONE_NO asc
        </if>
        <if test="sortname =='status' and sortorder == 'asc'">
            order by m.STATUS asc
        </if>
        <if test="sortname =='jointDate' and sortorder == 'asc'">
            order by m.JOINT_DATE asc, m.MEMBER_CODE asc
        </if>
        <if test="sortname =='approvalDate' and sortorder == 'asc'">
            order by m.APPROVAL_DATE asc, m.MEMBER_CODE asc
        </if>
        <if test="sortname =='approvalDate' and sortorder == 'asc'">
            order by m.JOINT_SITE asc
        </if>
        <if test="sortname =='memberCode' and sortorder == 'desc'">
            order by m.MEMBER_CODE desc
        </if>
        <if test="sortname =='memberName' and sortorder == 'desc'">
            order by m.MEMBER_NAME desc
        </if>
        <if test="sortname =='marketName' and sortorder == 'desc'">
            order by market_name desc
        </if>
        <if test="sortname =='email' and sortorder == 'desc'">
            order by m.EMAIL desc
        </if>
        <if test="sortname =='phoneNo' and sortorder == 'desc'">
            order by m.PHONE_NO desc
        </if>
        <if test="sortname =='status' and sortorder == 'desc'">
            order by m.STATUS desc
        </if>
        <if test="sortname =='jointDate' and sortorder == 'desc'">
            order by m.JOINT_DATE desc, m.MEMBER_CODE desc
        </if>
        <if test="sortname =='approvalDate' and sortorder == 'desc'">
            order by m.APPROVAL_DATE desc, m.MEMBER_CODE desc
        </if>
    </select>

    <!-- 根据导入的会员列表的会员ID查询会员信息 -->
    <select id="queryMembersByMemberListId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>,
        (SELECT coalesce(smt.name, sm.name)
        FROM spm_market_b sm
        LEFT OUTER JOIN spm_market_tl smt
        ON (sm.market_id = smt.market_id AND smt.lang = #{request.locale,jdbcType=VARCHAR,javaType=java.lang.String})
        WHERE mm.market_id = sm.market_id) market_name
        from mm_member_v mm
        where mm.status NOT IN ('TERM', 'ATERM', 'WCHG')
        AND mm.member_code in
        <foreach collection="memList" item="item" index="index"
                 open="(" separator="," close=")">#{item.memberCode}
        </foreach>
    </select>


    <!-- 根据memberId查询下线 -->
    <select id="selectSponsoresById" resultMap="BaseResultMap" parameterType="java.lang.Long">
        SELECT
        <include refid="Base_Column_List"/>
        FROM mm_member_v m
        WHERE m.SPONSOR_ID = #{memberId,jdbcType=DECIMAL}
        AND JOINT_DATE BETWEEN (SELECT SYSDATE - INTERVAL '1' YEAR FROM dual)
        AND (SELECT SYSDATE FROM dual)
    </select>

    <!-- 获取所有状态不为终止的members -->
    <select id="selectMembersByStatusNotIn" resultMap="BaseResultMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from mm_member_v
        where STATUS NOT IN
        <foreach separator="," item="listItem" collection="statusList" close=")" open="(">
            #{listItem}
        </foreach>
    </select>

    <!-- 用户资料详情页-查询会员-通用lov-Sql -->
    <select id="selectMembersByUM" resultMap="BaseResultMap" parameterType="java.util.Map">
        SELECT
        mm.member_code as memberCode,
        mm.member_id as memberId,
        "CONCAT" (
        CASE
        WHEN mm.english_name IS NULL THEN
        ''
        WHEN mm.chinese_name IS NULL THEN
        mm.english_name
        ELSE
        "CONCAT" (mm.english_name, '/')
        END,
        mm.chinese_name
        ) AS attribute2,
        mm.english_name,
        mm.chinese_name,
        mm.br_number as brNumber,
        mm.area_code as areaCode,
        mm.phone_no as phoneNo,
        mm.email,
        mm.status,
        (select scvb.meaning
        from sys_code_b scb,
        sys_code_value_b scvb
        where scb.code = 'MM.MEMBER_STATUS'
        AND scb.code_id = scvb.code_id
        AND scvb.value = mm.status) status_desc
        FROM
        mm_member_v mm
        <where>
            <if test="memberCode != null">
                AND mm.member_code = #{memberCode,jdbcType=VARCHAR}
            </if>
            <if test="brNumber != null">
                AND (mm.br_number = #{brNumber,jdbcType=VARCHAR} OR mm.id_number = #{brNumber,jdbcType=VARCHAR})
            </if>
            <if test="phoneNo != null">
                AND (mm.phone_no = #{phoneNo,jdbcType=VARCHAR} OR mm.oth_phone_no = #{phoneNo,jdbcType=VARCHAR})
            </if>
            <if test="attribute2 != null">
                AND (
                mm.english_name = #{attribute2,jdbcType=VARCHAR}
                OR mm.chinese_name = #{attribute2,jdbcType=VARCHAR}
                OR #{attribute2,jdbcType=VARCHAR} IN (
                SELECT
                mmr.english_name
                FROM
                mm_mem_relationship mmr
                WHERE
                mmr.member_id = mm.member_id
                )
                OR #{attribute2,jdbcType=VARCHAR} IN (
                SELECT
                mmr.chinese_name
                FROM
                mm_mem_relationship mmr
                WHERE
                mmr.member_id = mm.member_id
                )
                )
            </if>
        </where>
        <if test="sortname != null">
            <bind name='_colName' value='@com.lkkhpg.dsis.platform.util.CommonUtils@toColumnName(sortname)'/>
            ORDER BY ${_colName} ${sortorder}
        </if>

    </select>
    <!--   会员姓名查询autocomplete -->
    <select id="selectMemberByMemberName" resultMap="BaseResultMap"
            parameterType="com.lkkhpg.dsis.common.member.dto.Member">
        SELECT member_id,
        status,
        english_name,
        chinese_name,
        phone_no,
        oth_phone_no,
        email,
        member_code
        FROM mm_member_v t
        <where>
            <if test="chineseName != null">
                t.chinese_name like concat('%',concat( #{chineseName,jdbcType=VARCHAR},'%' ))
                OR ( (upper(t.english_name) like upper( concat('%',concat( #{chineseName,jdbcType=VARCHAR},'%'))) ))

            </if>
        </where>
        <if test="sortname != null">
            <bind name='_colName' value='@com.lkkhpg.dsis.platform.util.CommonUtils@toColumnName(sortname)'/>
            ORDER BY ${_colName} ${sortorder}
        </if>
    </select>

    <select id="getMemberIdByCode" resultMap="BaseResultMap" parameterType="java.util.Map">
        select DISTINCT MMB.member_id from mm_member mmb
        where
        mmb.status NOT IN ('TERM', 'ATERM')
        and mmb.MEMBER_CODE = #{memberCode,jdbcType=VARCHAR}
        <if test="marketId != null">
            and mmb.MARKET_ID = #{marketId,jdbcType=DECIMAL}
        </if>
        <if test="marketId == null">
            and mmb.MARKET_ID = #{request.marketId,jdbcType=DECIMAL}
        </if>
    </select>

    <!-- 会员转出和转入市场变更语句 -->
    <update id="updateMarketByMemberCode">
        UPDATE mm_member
        SET market_id = (SELECT sm.market_id FROM spm_market_b sm WHERE sm.code = #{newSaleOrgCode, jdbcType=VARCHAR}),
        DAPP_SYNC_FLAG = 'N'
        WHERE member_code = #{memberCode, jdbcType=VARCHAR}
        AND status NOT IN ('ATERM', 'TERM', 'WCHG')
    </update>

    <!-- 更新同步状态 -->
    <update id="updateSynFlagByMemberId" parameterType="java.util.Map">
        update MM_MEMBER
        set SYNC_FLAG = #{syncFlag, jdbcType=VARCHAR},
        OBJECT_VERSION_NUMBER = OBJECT_VERSION_NUMBER + 1,
        <!--           REQUEST_ID = #{requestId,jdbcType=DECIMAL}, -->
        <!--           PROGRAM_ID = #{programId,jdbcType=DECIMAL}, -->
        <!--           LAST_UPDATED_BY = #{lastUpdatedBy,jdbcType=DECIMAL}, -->
        LAST_UPDATE_DATE = CURRENT_TIMESTAMP
        <!--           LAST_UPDATE_LOGIN = #{lastUpdateLogin,jdbcType=DECIMAL} -->
        where MEMBER_ID = #{memberId,jdbcType=DECIMAL}
    </update>
    <!-- 选择同步标记非Y的会员 -->
    <select id="selectBySyncFlag" resultMap="BaseResultMap" parameterType="java.util.List">
        SELECT<include refid="Base_Column_List"/>,
        (SELECT sm.code
        FROM spm_market_b sm
        WHERE sm.market_id = mm.market_id) market_code,
        (SELECT mmr.rank
        FROM mm_mem_rank mmr
        WHERE mmr.member_id = mm.member_id
        AND mmr.month = to_char(current_date, 'YYYY-MM')) rank,
        coalesce((SELECT sao.code
        FROM spm_sales_organization_b sao
        WHERE to_char(sao.sales_org_id) = mm.joint_site), mm.joint_site) joint_site_code
        FROM mm_member_v mm
        WHERE (SYNC_FLAG != 'Y' or SYNC_FLAG is null)
        AND MARKET_ID in
        <foreach item="marketId" collection="list" open="(" separator="," close=")">
            #{marketId}
        </foreach>
        AND mm.status NOT IN ('WCHG', 'TERM', 'ATERM')
    </select>

    <update id="updateSponsorByMemberCode" parameterType="java.util.Map">
        update MM_MEMBER
        <set>
            <if test="sponsorId != null">
                SPONSOR_ID = #{sponsorId,jdbcType=VARCHAR},
            </if>
            <if test="memberRole != null">
                MEMBER_ROLE = #{memberRole,jdbcType=VARCHAR},
            </if>
            <if test="sponsorNo != null">
                SPONSOR_NO = #{sponsorNo,jdbcType=VARCHAR},
            </if>
            OBJECT_VERSION_NUMBER = OBJECT_VERSION_NUMBER + 1,
            LAST_UPDATED_BY = -1,
            LAST_UPDATE_DATE = CURRENT_TIMESTAMP,
            LAST_UPDATE_LOGIN = -1,
            DAPP_SYNC_FLAG = 'N',
        </set>
        where MEMBER_CODE = #{memberCode,jdbcType=VARCHAR}
    </update>

    <update id="updateStatusByMemberCode" parameterType="java.util.Map">
        update MM_MEMBER
        <set>
            <if test="memberRole != null">
                MEMBER_ROLE = #{memberRole,jdbcType=VARCHAR},
            </if>
            STATUS = 'TERM',
            OBJECT_VERSION_NUMBER = OBJECT_VERSION_NUMBER + 1,
            LAST_UPDATED_BY = -1,
            LAST_UPDATE_DATE = CURRENT_TIMESTAMP,
            LAST_UPDATE_LOGIN = -1,
            SYNC_FLAG = 'N',
            DAPP_SYNC_FLAG = 'N',
            <if test="terminationDate != null">
                TERMINATION_DATE = #{terminationDate,jdbcType=TIMESTAMP},
            </if>
        </set>
        where MEMBER_CODE = #{memberCode,jdbcType=VARCHAR}
    </update>

    <!-- 根据会员表ID查询会员信息 -->
    <select id="selectByPK" resultMap="BaseResultMap" parameterType="java.lang.Long">
        SELECT
        <include refid="Base_Column_List"/>
        FROM mm_member_v WHERE member_id = #{memberId,jdbcType=DECIMAL}

    </select>

    <select id="selectByAccountId" resultMap="BaseResultMap"
            parameterType="com.lkkhpg.dsis.platform.dto.system.Account">
        select
        mm.status,
        mm.member_code,
        mm.member_role,
        mm.member_id,
        mm.market_id,
        mm.phone_no,
        mm.email,
        mm.market_code,
        mm.area_code,
        mm.company_id,
        sa.first_login_flag,
        sa.login_name,
        sa.account_id,
        sar.account_type
        from mm_member_v mm,
        sys_acc_rel sar,
        sys_account sa
        where
        mm.member_id = sar.rel_party_id
        and sar.account_id = sa.account_id
        and sar.account_type = 'MEM'
        <if test="accountId !=null">
            and sa.account_id = #{accountId,jdbcType=DECIMAL}
        </if>
        <if test="loginName !=null">
            and sa.login_name=#{loginName,jdbcType=VARCHAR}
        </if>
    </select>

    <select id="checkPhoneOrEmail" resultMap="BaseResultMap" parameterType="com.lkkhpg.dsis.common.member.dto.Member">
        select
        mm.member_id,
        mm.phone_no,
        mm.market_id,
        mm.email,
        sa.login_name,
        sa.account_id
        from mm_member_v mm,
        sys_acc_rel sar,
        sys_account sa
        where
        mm.member_id = sar.rel_party_id
        and sar.account_id = sa.account_id
        and sar.account_type = 'MEM'
        <if test="phoneNo !=null">
            and mm.phone_no = #{phoneNo,jdbcType=VARCHAR}
        </if>
        <if test="email !=null">
            and mm.email=#{email,jdbcType=VARCHAR}
        </if>
    </select>

    <select id="checkUser" resultMap="BaseResultMap" parameterType="com.lkkhpg.dsis.common.member.dto.Member">
        select
        mm.member_id,
        mm.phone_no,
        mm.email,
        sa.login_name,
        sa.account_id
        from mm_member_v mm,
        sys_acc_rel sar,
        sys_account sa
        where
        mm.member_id = sar.rel_party_id
        and sar.account_id = sa.account_id
        and sar.account_type = 'MEM'
        <if test="loginName !=null">
            and mm.login_name = #{loginName,jdbcType=VARCHAR}
        </if>
    </select>

    <!-- 根据会员卡号查询OMK下线树 -->
    <!-- Oracle递归查询SQL，不兼容My SQL -->
    <select id="selectOmkDownLineByMemberCode" resultMap="BaseResultMap" parameterType="java.util.Map">
        SELECT omkdt."level",
        mm.sponsor_id,
        mm.member_id,
        decode(mm.member_id, NULL, decode(omkdlr.dealer_no, NULL, omkgdrc.dealer_no, omkdlr.dealer_no), mm.member_code)
        member_code,
        decode(mm.sponsor_no, NULL, decode(omkdlr.sponsor_no, NULL, decode(omkgdrc.sponsor_no, NULL, 0,
        omkgdrc.sponsor_no), omkdlr.sponsor_no), mm.sponsor_no) sponsor_no,
        decode(mm.member_id, NULL, decode(omkdlr.dealer_no, NULL, omkgdrc.dealer_name, omkdlr.dealer_name),
        mm.chinese_name) chinese_name,
        decode(mm.member_id, NULL, decode(omkdlr.dealer_no, NULL, omkgdrc.dealer_name, omkdlr.dealer_name),
        mm.english_name) english_name,
        decode(mm.member_id, NULL, decode(omkdlr.dealer_no, NULL, omkgdrc.dealer_name, omkdlr.dealer_name),
        mm.member_name) member_name,
        mm.company_id,
        mm.market_id,
        mm.sales_org_id,
        mm.member_type,
        mm.member_role,
        mm.area_code,
        mm.phone_no,
        decode(mm.member_id, NULL, decode(omkdlr.dealer_no, NULL, omkgdrc.type_effective_date,
        omkdlr.type_effective_date), mm.joint_date) joint_date,
        mm.status,
        mm.remark,
        decode(mm.member_id, NULL, NULL,
        (SELECT scvt.meaning
        FROM sys_code_b scb,
        sys_code_value_b scvb
        LEFT OUTER JOIN sys_code_value_tl scvt
        ON (scvb.code_value_id = scvt.code_value_id AND
        scvt.lang = #{request.locale,jdbcType=VARCHAR,javaType=java.lang.String})
        WHERE scb.code = 'MM.MEMBER_STATUS'
        AND scb.code_id = scvb.code_id
        AND scvb.value = mm.status)) status_desc
        FROM (SELECT LEVEL "level",
        dt.dealer_no,
        dt.sponsor_no,
        dt.level_no,
        dt.comments
        FROM omk.omk_de_dealer_tree dt
        <where>
            <if test="level !=null">
                AND LEVEL=#{level,jdbcType=DECIMAL}
            </if>
        </where>
        START WITH dt.dealer_no = #{memberCode,jdbcType=VARCHAR}
        CONNECT BY PRIOR dt.dealer_no = dt.sponsor_no) omkdt
        LEFT OUTER JOIN mm_member_v mm
        ON (mm.member_code = omkdt.dealer_no)
        LEFT OUTER JOIN omk.gds_dealer_info omkdlr
        ON (omkdlr.dealer_no = omkdt.dealer_no)
        LEFT OUTER JOIN omk.gds_dealer_ref_chn omkgdrc
        ON (omkgdrc.dealer_no = omkdt.dealer_no)
    </select>

    <!-- 根据会员Id查询下线树 -->
    <!-- Oracle递归查询SQL，不兼容My SQL -->
    <select id="selectDownLineByMemberId" resultMap="BaseResultMap" parameterType="java.util.Map">
        SELECT LEVEL,
        mm.sponsor_id,
        mm.member_id,
        mm.member_code,
        mm.sponsor_no,
        mm.chinese_name,
        mm.english_name,
        mm.member_name,
        mm.company_id,
        mm.market_id,
        mm.sales_org_id,
        mm.member_type,
        mm.member_role,
        mm.area_code,
        mm.phone_no,
        mm.joint_date,
        mm.status,
        mm.remark,
        (SELECT scvb.meaning
        FROM sys_code_b scb,
        sys_code_value_b scvb
        LEFT OUTER JOIN sys_code_value_tl scvt
        ON (scvb.code_value_id = scvt.code_value_id AND
        scvt.lang = #{request.locale,jdbcType=VARCHAR,javaType=java.lang.String})
        WHERE scb.code = 'MM.MEMBER_STATUS'
        AND scb.code_id = scvb.code_id
        AND scvb.value = mm.status) status_desc,
        (SELECT mmd.deadline
        FROM mm_member_deadline_v mmd
        WHERE mmd.member_id = mm.member_id) deadline
        FROM mm_member_v mm
        <where>
            <if test="level !=null">
                AND LEVEL=#{level,jdbcType=DECIMAL}
            </if>
            <if test='excludeSelf == "Y"'>
                AND LEVEL != 1
            </if>
        </where>
        START WITH mm.member_id = #{memberId, jdbcType = DECIMAL}
        CONNECT BY PRIOR mm.member_id = mm.sponsor_id
    </select>

    <!-- 根据会员Id查询上线 -->
    <!-- Oracle递归查询SQL，不兼容My SQL -->
    <select id="selectUpLineByMemberId" resultMap="BaseResultMap" parameterType="java.util.Map">
        SELECT LEVEL,
        mm.sponsor_id,
        mm.member_id,
        mm.member_code,
        mm.sponsor_no,
        mm.chinese_name,
        mm.english_name,
        mm.member_name,
        mm.company_id,
        mm.market_id,
        mm.sales_org_id,
        mm.member_type,
        mm.member_role,
        mm.area_code,
        mm.phone_no,
        mm.joint_date,
        mm.status,
        mm.remark,
        (SELECT scvb.meaning
        FROM sys_code_b scb,
        sys_code_value_b scvb
        LEFT OUTER JOIN sys_code_value_tl scvt
        ON (scvb.code_value_id = scvt.code_value_id AND
        scvt.lang = #{request.locale,jdbcType=VARCHAR,javaType=java.lang.String})
        WHERE scb.code = 'MM.MEMBER_STATUS'
        AND scb.code_id = scvb.code_id
        AND scvb.value = mm.status) status_desc,
        (SELECT mmd.deadline
        FROM mm_member_deadline_v mmd
        WHERE mmd.member_id = mm.member_id) deadline
        FROM mm_member_v mm
        <where>
            <if test="level !=null">
                AND LEVEL=#{level,jdbcType=DECIMAL}
            </if>
            <if test='excludeSelf == "Y"'>
                AND LEVEL != 1
            </if>
        </where>
        START WITH mm.member_id = #{memberId, jdbcType = DECIMAL}
        CONNECT BY PRIOR mm.sponsor_id = mm.member_id
    </select>

    <select id="getMemberTree" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        mm.chinese_name,
        mm.member_id
        from
        mm_member_v mm
        where
        sponsor_id = #{sponsorId,jdbcType=DECIMAL}
    </select>

    <!-- 校验证件编码是否存在(会员证件编码) -->
    <select id="isMemberIdNumberExist" resultType="java.lang.String" parameterType="java.util.Map">
        SELECT 'Y'
        FROM dual
        WHERE (EXISTS (SELECT 'X'
        FROM mm_member mm
        WHERE mm.member_id != coalesce(#{memberId,jdbcType=DECIMAL} , -999)
        AND mm.id_type = #{idType,jdbcType=VARCHAR}
        AND UPPER(mm.id_number) = UPPER(#{idNumber,jdbcType=VARCHAR})
        AND mm.status not in ('TERM','ATERM')) OR
        EXISTS (SELECT 'X'
        FROM mm_mem_relationship mmr, mm_member mm
        WHERE mmr.rel_type = 'SPOUS'
        AND mmr.member_id = mm.member_id
        AND mmr.member_id != coalesce(#{memberId,jdbcType=DECIMAL} , -999)
        AND mmr.id_type = #{idType,jdbcType=VARCHAR}
        AND UPPER(mmr.id_number) = UPPER(#{idNumber,jdbcType=VARCHAR})
        AND mm.status not in ('TERM','ATERM'))
        )
    </select>

    <select id="isMemberPhoneNoExit" resultType="java.lang.String" parameterType="java.util.Map">
           SELECT 'Y'
        FROM dual
        WHERE EXISTS (SELECT 'X'
        FROM mm_member mm
        WHERE mm.member_id != coalesce(#{memberId,jdbcType=DECIMAL} , -999)
        AND mm.phone_no=#{phoneNo,jdbcType=VARCHAR}
        AND mm.MARKET_ID=#{marketId,jdbcType=DECIMAL}
        AND mm.status not in ('TERM','ATERM'))
    </select>

    <select id="isMemberIdNumberExistForMY" resultType="java.lang.String" parameterType="java.util.Map">
        SELECT 'Y'
        FROM dual
        WHERE EXISTS (SELECT 'X'
        FROM mm_member mm
        WHERE mm.member_id != coalesce(#{memberId,jdbcType=DECIMAL} , -999)
        AND UPPER(mm.id_number) = UPPER(#{idNumber,jdbcType=VARCHAR})
        AND mm.status not in ('TERM','ATERM')
        AND mm.market_id = (select market_id from spm_market_b where code = 'MY'))
    </select>
    <!-- 校验证件编码是否存在(配偶的证件编码) -->
    <select id="isSpouseIdNumberExist" resultType="java.lang.String" parameterType="java.util.Map">
        SELECT 'Y'
        FROM dual
        WHERE EXISTS (SELECT 'X'
        FROM mm_mem_relationship mmr,mm_member mm
        WHERE mmr.rel_type = 'SPOUS'
        AND mmr.id_type = #{idType,jdbcType=VARCHAR}
        AND UPPER(mmr.id_number) = UPPER(#{idNumber,jdbcType=VARCHAR})
        AND mm.member_id = mmr.member_id
        AND mm.status not in ('TERM','ATERM'))
    </select>
    <!-- 校验公司商业注册码是否存在 -->
    <select id="isBrNumberExist" resultType="java.lang.String" parameterType="java.util.Map">
        SELECT 'Y'
        FROM dual
        WHERE EXISTS (SELECT 'X'
        FROM mm_member mm
        WHERE mm.member_id != coalesce(#{memberId,jdbcType=DECIMAL} , -999)
        AND UPPER(mm.br_number) = UPPER(#{brNumber,jdbcType=VARCHAR})
        AND mm.status not in ('TERM','ATERM'))
    </select>

    <!-- 根据加入日期或更新日期范围查找会员 -->
    <select id="selectMembersByDate" resultMap="BaseResultMap" parameterType="java.util.Map">
        SELECT mm.member_id,
        mm.member_type,
        mm.market_id,
        mm.company_id,
        mm.member_role,
        mm.status,
        mm.remark,
        mm.br_number,
        mm.ref_company,
        mm.english_name,
        mm.chinese_name,
        mm.member_name,
        mm.gender,
        mm.dob,
        mm.id_type,
        mm.id_number,
        mm.nationality,
        mm.country,
        mm.language,
        mm.race,
        mm.education,
        mm.citizen_type,
        mm.nhi_tax_excluded,
        mm.gst_id_number,
        mm.ad_opt_in,
        mm.sys_msg_in,
        mm.joint_site,
        mm.joint_date,
        mm.approval_date,
        mm.sponsor_id,
        mm.accept_bonus,
        mm.sales_org_id,
        mm.member_code,
        mm.area_code,
        mm.phone_no,
        mm.other_area_code,
        mm.oth_phone_no,
        mm.email,
        mm.warning_msg,
        mm.travel_plan_month,
        mm.sync_flag,
        mm.chinese_first_name,
        mm.chinese_last_name,
        mm.english_first_name,
        mm.english_last_name,
        mm.sponsor_no,
        sponsor.sponsor_english_name,
        sponsor.sponsor_chinese_name
        FROM mm_member_v mm
        LEFT OUTER JOIN mm_sponsor_v sponsor
        ON (coalesce(mm.sponsor_id, -999) = coalesce(sponsor.member_id, -999) AND
        mm.sponsor_no = sponsor.sponsor_no)
        LEFT OUTER JOIN spm_market_b sm
        ON (mm.market_id = sm.market_id)
        <where>
            <if test="marketCode != null">
                SM.CODE = #{marketCode,jdbcType=DECIMAL}
            </if>
            <if test="startDate != null">
                AND MM.JOINT_DATE <![CDATA[ >= #{startDate,jdbcType=TIMESTAMP} ]]>
            </if>
            <if test="endDate != null">
                AND MM.JOINT_DATE <![CDATA[ <= #{endDate,jdbcType=TIMESTAMP} ]]>
            </if>
            <if test="updateStartDate != null">
                AND MM.LAST_UPDATE_DATE <![CDATA[ >= #{updateStartDate,jdbcType=TIMESTAMP} ]]>
            </if>
            <if test="updateEndDate != null">
                AND MM.LAST_UPDATE_DATE <![CDATA[ <= #{updateEndDate,jdbcType=TIMESTAMP} ]]>
            </if>
        </where>
    </select>

    <select id="selectMemberByMarket" resultMap="BaseResultMap"
            parameterType="java.util.Map">
        SELECT mm.member_id,
        mm.member_type,
        mm.market_id,
        mm.company_id,
        mm.member_role,
        mm.status,
        mm.remark,
        mm.br_number,
        mm.ref_company,
        mm.gender,
        mm.dob,
        mm.id_type,
        mm.id_number,
        mm.nationality,
        mm.country,
        mm.LANGUAGE,
        mm.race,
        mm.education,
        mm.citizen_type,
        mm.nhi_tax_excluded,
        mm.gst_id_number,
        mm.ad_opt_in,
        mm.sys_msg_in,
        mm.joint_site,
        mm.joint_date,
        mm.approval_date,
        mm.sponsor_id,
        mm.accept_bonus,
        mm.object_version_number,
        mm.request_id,
        mm.program_id,
        mm.creation_date,
        mm.created_by,
        mm.last_updated_by,
        mm.last_update_date,
        mm.last_update_login,
        mm.attribute_category,
        mm.attribute1,
        mm.attribute2,
        mm.attribute3,
        mm.attribute4,
        mm.attribute5,
        mm.attribute6,
        mm.attribute7,
        mm.attribute8,
        mm.attribute9,
        mm.attribute10,
        mm.attribute11,
        mm.attribute12,
        mm.attribute13,
        mm.attribute14,
        mm.attribute15,
        mm.SALES_ORGANIZATION,
        mm.sales_org_id,
        mm.member_code,
        mm.area_code,
        mm.phone_no,
        mm.other_area_code,
        mm.oth_phone_no,
        mm.email,
        mm.warning_msg,
        mm.travel_plan_month,
        mm.sync_flag,
        mm.sponsor_no,
        mm.english_first_name,
        mm.english_last_name,
        mm.chinese_first_name,
        mm.chinese_last_name,
        mm.dapp_sync_flag
        FROM mm_member mm
        LEFT OUTER JOIN spm_market_b sm
        on(mm.market_id = sm.market_id)
        <where>
            mm.dapp_sync_flag = 'N'
            <if test="market !=null">
                AND sm.code = #{market, jdbcType = VARCHAR,javaType = java.lang.String}
            </if>
            <if test="distributorNumber !=null">
                AND mm.member_code = #{distributorNumber,jdbcType = VARCHAR,javaType =
        java.lang.String}
            </if>
        </where>
    </select>

    <select id="selectMemberByDAppSyncFlag" resultMap="BaseResultMap">
        SELECT mm.member_id,
        mm.member_code
        FROM mm_member mm
        WHERE mm.dapp_sync_flag = 'N'
        AND substr(mm.member_code, 10, 1) != '_'
    </select>

    <update id="updateDAppSyncFlag" parameterType="com.lkkhpg.dsis.common.member.dto.Member">
        UPDATE MM_MEMBER mm
        SET mm.dapp_sync_flag = #{dappSyncFlag, jdbcType=VARCHAR},
        mm.object_version_number = mm.object_version_number + 1,
        mm.request_id = #{requestId,jdbcType=DECIMAL},
        mm.program_id = #{programId,jdbcType=DECIMAL},
        mm.last_updated_by = #{lastUpdatedBy,jdbcType=DECIMAL},
        mm.last_update_date = CURRENT_TIMESTAMP,
        mm.last_update_login = #{lastUpdateLogin,jdbcType=DECIMAL}
        WHERE mm.member_id = #{memberId, jdbcType=DECIMAL}
    </update>

    <select id="selectMemberByDappSync" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"></include>
        from mm_member_v where dapp_sync_flag = 'N'
        AND (substr(member_code, 10, 1) != '_' or
        substr(member_code, 10, 1) is null)
    </select>

    <!-- 根据消息里的会员Id列表获取会员 -->
    <select id="selectMemberByMsgMemberIds" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"></include>
        FROM mm_member_v mm
        <where>
            #{memberIds, jdbcType=VARCHAR} LIKE '%{' || mm.member_id || '}%'
            <if test="adOptIn !=null">
                and mm.ad_opt_in = #{adOptIn, jdbcType=VARCHAR}
            </if>
            <if test="sysMsgIn !=null">
                and mm.sys_msg_in = #{sysMsgIn, jdbcType=VARCHAR}
            </if>
        </where>
    </select>

    <!-- 根据会员卡号查找最大快照序号 -->
    <select id="selectMaxSeqByMemberCode" resultType="java.lang.Long" parameterType="java.lang.String">
        SELECT coalesce(to_number(MAX(substr(t.member_code,
        instr(t.member_code, '_') + 1)
        )
        ),
        0)
        FROM mm_member t
        WHERE t.member_code LIKE concat(#{memberCode, jdbcType=VARCHAR}, '%')
        AND t.member_code NOT LIKE '%_T'
        AND instr(t.member_code, '_') > 0
    </select>

    <!-- 获取待变更的会员 -->
    <resultMap id="ChangeOwnership" type="com.lkkhpg.dsis.common.member.dto.ChangeOwnership">
        <result column="source_member_id" property="sourceMemberId" jdbcType="DECIMAL"/>
        <result column="temp_member_id" property="tempMemberId" jdbcType="DECIMAL"/>
        <result column="source_member_code" property="sourceMemberCode" jdbcType="VARCHAR"/>
        <result column="temp_member_code" property="tempMemberCode" jdbcType="VARCHAR"/>
    </resultMap>
    <select id="selectWaitingChgMember" resultMap="ChangeOwnership">
        SELECT (SELECT mm_source.member_id
        FROM mm_member mm_source
        WHERE concat(mm_source.member_code, '_T') = mm_temp.member_code) source_member_id,
        mm_temp.member_id temp_member_id,
        mm_temp.member_code temp_member_code
        FROM mm_member mm_temp
        WHERE mm_temp.status = 'WCHG'
    </select>

    <!-- 获取序列号 -->
    <select id="selectKey" resultType="java.lang.Long">
select UNIX_TIMESTAMP()*1000+floor(rand()*1000) from dual
    </select>

    <!-- 更新memberId -->
    <update id="upgradeMemberId" parameterType="java.util.Map">
        UPDATE mm_member
        SET member_id = #{newMemberId,jdbcType=DECIMAL},
        member_code = #{newMemberCode, jdbcType=VARCHAR},
        status = #{newSatus, jdbcType=VARCHAR},
        <if test="terminationDate != null">
            termination_date = #{terminationDate,jdbcType=TIMESTAMP},
        </if>
        <if test="jointDate != null">
            joint_date = #{jointDate,jdbcType=TIMESTAMP},
        </if>
        <if test="approvalDate != null">
            approval_date = #{approvalDate,jdbcType=TIMESTAMP},
        </if>
        sponsor_id = #{sponsorId, jdbcType=DECIMAL},
        sponsor_no = #{sponsorNo, jdbcType=VARCHAR},
        SYNC_FLAG = 'N',
        DAPP_SYNC_FLAG = 'N'
        WHERE member_id = #{oldMemberId,jdbcType=DECIMAL}
    </update>

    <select id="queryByMemberAccountId" parameterType="com.lkkhpg.dsis.common.member.dto.Member"
            resultMap="BaseResultMap">
        select
        mmv.member_id,
        mmv.member_name,
        mmv.member_code,
        mmv.phone_no,
        mmv.email,
        mmv.status,
        mmv.br_number,
        mmv.area_code,
        sar.account_id
        from mm_member_v mmv,sys_acc_rel sar
        where sar.REL_PARTY_ID=mmv.member_id
        and sar.account_type = 'MEM'
        and mmv.status = 'ACTV'
        <if test="memberId != null">
            and member_id = #{memberId,jdbcType=DECIMAL}
        </if>
        <if test="memberCode != null">
            and Upper(mmv.member_code) like concat('%',concat(Upper(#{memberCode,jdbcType=VARCHAR}),'%'))
        </if>
        <if test="memberName != null">
            and Upper(mmv.member_name) like concat('%',concat(Upper(#{memberName,jdbcType=VARCHAR}),'%'))
        </if>
        <if test="phoneNo != null">
            and Upper(mmv.phone_no) like concat('%',concat(Upper(#{phoneNo,jdbcType=VARCHAR}),'%'))
        </if>
        <if test="status != null">
            and mmv.status=#{status, jdbcType=VARCHAR}
        </if>
        <if test="brNumber != null">
            and Upper(mmv.br_number) like concat('%',concat(Upper(#{brNumber,jdbcType=VARCHAR}),'%'))
        </if>
        <if test="sortname != null">
            <bind name='_colName' value='@com.lkkhpg.dsis.platform.util.CommonUtils@toColumnName(sortname)'/>
            ORDER BY ${_colName} ${sortorder}
        </if>
    </select>

    <select id="queryByMemberList" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        mmv.member_id,
        mmv.member_name,
        mmv.member_code,
        mmv.phone_no,
        mmv.email,
        mmv.status,
        mmv.br_number,
        mmv.area_code,
        sar.account_id
        from mm_member_v mmv,sys_acc_rel sar
        where sar.REL_PARTY_ID=mmv.member_id
        and sar.account_type = 'MEM'
        and mmv.status = 'ACTV'
        <if test="memberId != null">
            and member_id = #{memberId,jdbcType=DECIMAL}
        </if>
        <if test="memberCode != null">
            and Upper(mmv.member_code) like concat('%',concat(Upper(#{memberCode,jdbcType=VARCHAR}),'%'))
        </if>
        <if test="memberName != null">
            and Upper(mmv.member_name) like concat('%',concat(Upper(#{memberName,jdbcType=VARCHAR}),'%'))
        </if>
        <if test="phoneNo != null">
            and Upper(mmv.phone_no) like concat('%',concat(Upper(#{phoneNo,jdbcType=VARCHAR}),'%'))
        </if>
        <if test="status != null">
            and mmv.status=#{status, jdbcType=VARCHAR}
        </if>
        <if test="brNumber != null">
            and Upper(mmv.br_number) like concat('%',concat(Upper(#{brNumber,jdbcType=VARCHAR}),'%'))
        </if>
    </select>

    <select id="queryMembersForOrder" resultMap="BaseResultMap"
            parameterType="com.lkkhpg.dsis.common.member.dto.Member">
        SELECT
        m.MEMBER_ID,
        m.MEMBER_TYPE,
        m.MARKET_ID,
        m.STATUS,
        m.MEMBER_ROLE,
        m.MEMBER_CODE,
        CASE
        WHEN m.MEMBER_TYPE = 'COMP' THEN
        m.REF_COMPANY
        ELSE
        m.CHINESE_NAME
        END CHINESE_NAME,
        CASE
        WHEN m.MEMBER_TYPE = 'COMP' THEN
        m.REF_COMPANY_EN
        ELSE
        m.ENGLISH_NAME
        END ENGLISH_NAME,
        m.SALES_ORG_ID,
        m.PHONE_NO,
        m.salespiont,
        m.exchangebalance,
        m.remainingbalance,
        m.MEMBER_NAME,
        m.EMAIL,
        m.WARNING_MSG,
        (SELECT scvb.meaning
        FROM sys_code_b scb,
        sys_code_value_b scvb
        LEFT OUTER JOIN sys_code_value_tl scvt
        ON (scvb.code_value_id = scvt.code_value_id AND scvt.lang =
        #{request.locale,jdbcType=VARCHAR,javaType=java.lang.String})
        WHERE scb.code = 'MM.MEMBER_STATUS'
        AND scb.code_id = scvb.code_id
        AND scvb.value = m.status) STATUS_DESC,
        (SELECT mmr.ps
        FROM OMK.OMK_RTL_SALARY_BALANCE mmr
        WHERE mmr.DEALER_NO = m.member_code
        AND mmr.REF_PERIOD = (SELECT to_char(CURRENT_TIMESTAMP, 'yyyyMM') FROM dual)) currentpv
        from MM_MEMBER_V m
        <where>
            <if test="memberCode != null">
                m.MEMBER_CODE like concat('%', concat(#{memberCode,jdbcType=VARCHAR}, '%'))
            </if>
            <if test="memberId !=null">
                AND m.MEMBER_ID = #{memberId,jdbcType=DECIMAL}
            </if>
            <if test="phoneNo != null">
                and (m.PHONE_NO like concat('%', concat(#{phoneNo,jdbcType=VARCHAR}, '%')) or m.OTH_PHONE_NO like
                concat('%', concat(#{phoneNo,jdbcType=VARCHAR}, '%')))
            </if>
            <if test="isActive !=null">
                and m.MEMBER_ID not in (select MEMBER_ID from MM_MEM_STATUS_CHANGE where OPERATION_TYPE='TERM' AND
                APPROVAL_STATUS!='F')
                and m.STATUS not in ('RJECT','SUPSE','TERM','ATERM','WCHG')
            </if>
            <if test="chineseName !=null">
                AND m.CHINESE_NAME LIKE concat('%', concat(#{chineseName,jdbcType=VARCHAR}, '%'))
            </if>
            <if test="englishName !=null">
                AND m.ENGLISH_NAME LIKE concat('%', concat(#{englishName,jdbcType=VARCHAR}, '%'))
            </if>
            <if test="status !=null">
                AND m.STATUS = #{status,jdbcType=VARCHAR}
            </if>
            <if test="marketId !=null">
                AND (m.MARKET_ID = #{marketId,jdbcType=DECIMAL}
                <if test="igiMarketId !=null">
                    OR m.MARKET_ID = #{igiMarketId,jdbcType=DECIMAL}
                </if>
                )
            </if>
            <if test="registerCode != null">
                and (m.BR_NUMBER = #{registerCode,jdbcType=VARCHAR} or m.ID_NUMBER = #{registerCode,jdbcType=VARCHAR}
                or
                m.member_id IN
                (SELECT member_id
                FROM MM_MEM_RELATIONSHIP rel
                WHERE rel.rel_type = 'SPOUS'
                AND rel.ID_NUMBER = #{registerCode,jdbcType=VARCHAR})
                )
            </if>
            <if test="memberName != null">
                AND (
                m.chinese_name like concat('%',concat(#{memberName,jdbcType=VARCHAR},'%'))
                OR upper(m.english_name) like concat('%',concat(upper(#{memberName,jdbcType=VARCHAR}),'%'))
                OR m.member_id in
                (select rel.member_id from MM_MEM_RELATIONSHIP rel
                where (rel.chinese_name like concat('%', concat(#{memberName,jdbcType=VARCHAR}, '%'))
                or upper(rel.english_name) like
                concat('%', concat(upper(#{memberName,jdbcType=VARCHAR}), '%')))
                and rel.REL_TYPE = 'SPOUS'
                and m.member_id = rel.member_id
                )
                )
            </if>
            <if test="memberRole !=null">
                AND m.MEMBER_ROLE = #{memberRole,jdbcType=VARCHAR}
            </if>
        </where>
    </select>

    <select id="queryMembersForIpointOrder" resultMap="BaseResultMap"
            parameterType="com.lkkhpg.dsis.common.member.dto.Member">
        SELECT
        m.MEMBER_ID,
        m.MEMBER_TYPE,
        m.MARKET_ID,
        m.STATUS,
        m.MEMBER_ROLE,
        m.MEMBER_CODE,
        CASE
        WHEN m.MEMBER_TYPE = 'COMP' THEN
        m.REF_COMPANY
        ELSE
        m.CHINESE_NAME
        END CHINESE_NAME,
        CASE
        WHEN m.MEMBER_TYPE = 'COMP' THEN
        m.REF_COMPANY_EN
        ELSE
        m.ENGLISH_NAME
        END ENGLISH_NAME,
        m.SALES_ORG_ID,
        m.PHONE_NO,
        m.salespiont,
        m.exchangebalance,
        m.remainingbalance,
        m.MEMBER_NAME,
        m.EMAIL,
        m.WARNING_MSG,
        ( CASE M.MEMBER_TYPE
        WHEN 'COMP'
        THEN m.BR_NUMBER
        ELSE m.ID_NUMBER
        END) AS ID_NUMBER,
        (SELECT scvb.meaning
        FROM sys_code_b scb,
        sys_code_value_b scvb
        LEFT OUTER JOIN sys_code_value_tl scvt
        ON (scvb.code_value_id = scvt.code_value_id AND scvt.lang =
        #{request.locale,jdbcType=VARCHAR,javaType=java.lang.String})
        WHERE scb.code = 'MM.MEMBER_STATUS'
        AND scb.code_id = scvb.code_id
        AND scvb.value = m.status) STATUS_DESC,
        (SELECT mmr.ps
        FROM OMK.OMK_RTL_SALARY_BALANCE mmr
        WHERE mmr.DEALER_NO = m.member_code
        AND mmr.REF_PERIOD = (SELECT to_char(CURRENT_TIMESTAMP, 'yyyyMM') FROM dual)) currentpv
        from MM_MEMBER_V m
        <where>
            <if test="memberCode != null">
                m.MEMBER_CODE = #{memberCode,jdbcType=VARCHAR}
            </if>
            <if test="memberId !=null">
                AND m.MEMBER_ID = #{memberId,jdbcType=DECIMAL}
            </if>
            <if test="isActive !=null">
                and m.MEMBER_ID not in (select MEMBER_ID from MM_MEM_STATUS_CHANGE where OPERATION_TYPE='TERM' AND
                APPROVAL_STATUS!='F')
                and m.STATUS not in ('RJECT','SUPSE','TERM','ATERM','WCHG')
            </if>
            <if test="chineseName !=null">
                AND m.CHINESE_NAME = #{chineseName,jdbcType=VARCHAR}
            </if>
            <if test="englishName !=null">
                AND m.ENGLISH_NAME = #{englishName,jdbcType=VARCHAR}
            </if>
            <if test="status !=null">
                AND m.STATUS = #{status,jdbcType=VARCHAR}
            </if>
            <if test="marketId !=null">
                AND (m.MARKET_ID = #{request.marketId,jdbcType=DECIMAL}
                <if test="igiMarketId !=null">
                    OR m.MARKET_ID = #{igiMarketId,jdbcType=DECIMAL}
                </if>
                )
            </if>
            <if test="registerCode != null">
                and (m.BR_NUMBER = #{registerCode,jdbcType=VARCHAR} or m.ID_NUMBER = #{registerCode,jdbcType=VARCHAR}
                or
                m.member_id IN
                (SELECT member_id
                FROM MM_MEM_RELATIONSHIP rel
                WHERE rel.rel_type = 'SPOUS'
                AND rel.ID_NUMBER = #{registerCode,jdbcType=VARCHAR})
                )
            </if>
            <if test="memberRole !=null">
                AND m.MEMBER_ROLE = #{memberRole,jdbcType=VARCHAR}
            </if>
        </where>

    </select>

    <select id="getDistributorByDrbNumAndIdNum" resultMap="BaseResultMap" parameterType="java.util.Map">
        SELECT
        <include refid="Base_Column_List"/>
        FROM mm_member_v mm
        <where>
            <if test="distributorNumber != null">
                mm.member_code = #{distributorNumber,jdbcType=VARCHAR}
            </if>
            <if test="idNumber != null">
                AND UPPER(mm.id_number) = UPPER(#{idNumber,jdbcType=VARCHAR})
            </if>
        </where>
    </select>

    <select id="getRankFromIsgPostCode" resultType="java.lang.Integer" parameterType="java.lang.String">
        select * from (
        select d.DEALER_POST_CODE from ISG_POST_DETAIL d
        where
        TO_DATE(d.PERIOD,'yyyyMM') =
        (
        select max(TO_DATE(PERIOD,'yyyyMM')) from ISG_POST_DETAIL where DEALER_NO = #{memberCode,jdbcType=VARCHAR}
        )
        ORDER BY COALESCE(SUBSTR(d.PERIOD_MARK,2,1),d.PERIOD_MARK) asc
        )
        where ROWNUM = 1
    </select>

    <select id="getTPFromGdsSalaryLctTT" resultType="java.math.BigDecimal" parameterType="java.lang.String">
        select sum(tp) from (
        select omslt.omk_tt tp from omk.OMK_ME_SALARY_LCL_TT omslt
        where omslt.DEALER_NO = #{memberCode, jdbcType=VARCHAR}
        UNION
        select odslt.omk_tt tp from omk.OMK_DE_SALARY_LCL_TT odslt
        where odslt.DEALER_NO = #{memberCode, jdbcType=VARCHAR}
        )
    </select>
    <select id="selectByDappNo" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"/>
        from mm_member_v where dapp_app_no = #{dappAppNo,jdbcType=VARCHAR}
    </select>
    <select id="queryMembersInTw" resultMap="BaseResultMap">
        select distinct mem.member_code,
        coalesce(smct.name, sm.name) market_name
        from mm_member_v mem, spm_market_b sm
        left outer join spm_market_tl smct
        on (sm.market_id = smct.market_id)
        <where>
            mem.market_code = 'TW'
            and mem.status = 'ACTV'
            and mem.market_id = sm.market_id
            <if test="memberCode != null">
                and mem.member_code = #{memberCode, jdbcType=VARCHAR}
            </if>
        </where>
        order by mem.member_code
        <if test="sortname != null and sortname != 'memberCode' ">
            <bind name='_colName' value='@com.lkkhpg.dsis.platform.util.CommonUtils@toColumnName(sortname)'/>
            , ${_colName} ${sortorder}
        </if>

    </select>
    <update id="updateCouponInvalid" parameterType="com.lkkhpg.dsis.common.member.dto.Member">
        update pdm_voucher
        set enabled_flag = 'N'
        where voucher_id in
        (select voucher_id from pdm_voucher_assign where member_id = #{memberId,jdbcType=DECIMAL})
    </update>
    <select id="isSameSpouseName" parameterType="java.util.Map" resultType="java.lang.String">
        SELECT 'Y'
        FROM dual
        WHERE (EXISTS (SELECT 'X'
        FROM mm_mem_relationship mmr
        LEFT OUTER JOIN mm_member mm ON mm.member_id = mmr.member_id
        WHERE mmr.member_id != coalesce(#{memberId,jdbcType=DECIMAL} , -999)
        AND mmr.rel_type = 'SPOUS'
        AND (mmr.english_name = #{spouseEnglishName,jdbcType=VARCHAR}
        OR mmr.chinese_name = #{spouseChineseName,jdbcType=VARCHAR})
        AND mm.status not in ('TERM', 'ATERM')))
    </select>

    <select id="checkVIP" resultType="java.lang.Long" parameterType="java.lang.String">
        SELECT MM.MEMBER_ID
        FROM mm_member mm
        WHERE mm.member_role = 'VIP'
        AND mm.member_code = #{memberCode, jdbcType=VARCHAR}
    </select>
    <select id="selectMarketCodeByMemberCode" parameterType="java.lang.String" resultType="java.lang.String">
        select sm.code
        from mm_member mm, spm_market_b sm
        where mm.market_id = sm.market_id
        and mm.member_code = #{memberCode, jdbcType=VARCHAR}
    </select>

    <resultMap id="LocationResultMap" type="com.lkkhpg.dsis.common.config.dto.SpmLocation"
               extends="com.lkkhpg.dsis.platform.mapper.BaseMapper.STD">
        <id column="LOCATION_ID" property="locationId" jdbcType="DECIMAL"/>
        <result column="COUNTRY_CODE" property="countryCode" jdbcType="VARCHAR"/>
        <result column="STATE_CODE" property="stateCode" jdbcType="VARCHAR"/>
        <result column="CITY_CODE" property="cityCode" jdbcType="VARCHAR"/>
        <result column="ADDRESS_LINE1" property="addressLine1" jdbcType="VARCHAR"/>
        <result column="ADDRESS_LINE2" property="addressLine2" jdbcType="VARCHAR"/>
        <result column="ADDRESS_LINE3" property="addressLine3" jdbcType="VARCHAR"/>
        <result column="ZIP_CODE" property="zipCode" jdbcType="VARCHAR"/>
    </resultMap>
    <resultMap id="SiteResultMap" type="com.lkkhpg.dsis.common.member.dto.MemSite"
               extends="com.lkkhpg.dsis.platform.mapper.BaseMapper.STD">
        <id column="SITE_ID" property="siteId" jdbcType="DECIMAL"/>
        <result column="SITE_USE_CODE" property="siteUseCode" jdbcType="VARCHAR"/>
        <result column="NAME" property="name" jdbcType="VARCHAR"/>
        <result column="PHONE" property="phone" jdbcType="VARCHAR"/>
        <result column="DEFAULT_FLAG" property="defaultFlag" jdbcType="VARCHAR"/>
        <result column="ADDRESS" property="address" jdbcType="VARCHAR"/>
        <result column="AREA_CODE" property="areaCode" jdbcType="VARCHAR"/>
        <collection property="spmLocation" ofType="com.lkkhpg.dsis.common.config.dto.SpmLocation"
                    resultMap="LocationResultMap"/>
    </resultMap>
    <select id="queryMemSites" resultMap="SiteResultMap">
        select SPV.COUNTRY_CODE,
        SPV.STATE_CODE,
        SPV.CITY_CODE,
        SPV.ADDRESS_LINE1,
        SPV.ADDRESS_LINE2,
        SPV.ADDRESS_LINE3,
        spv.ZIP_CODE,
        MMS.AREA_CODE,
        MMS. NAME,
        MMS.PHONE,
        MMS.SITE_ID,
        case (select scv.meaning
        from sys_code_b sc, sys_code_value_b scv
        where sc.code_id = scv.code_id
        and code = 'SPM.HIDE_STATE'
        and value = SPV.country_code) when 'Y' then(case SPV.LANG when 'en_GB' Then (
        SPV.address_line1 ||','|| decode(SPV.address_line2,null,'',SPV.address_line2||',') ||
        decode(SPV.address_line3,null,'',SPV.address_line3||',')|| scy.name||','|| sc.name
        )else (sc.name || scy.name || SPV.address_line1 || SPV.address_line2 || SPV.address_line3 || SPV.address_line4
        || SPV.address_line5)
        end ) else(
        case spv.LANG when 'en_GB' Then (
        SPV.address_line1 ||','|| decode(SPV.address_line2,null,'',SPV.address_line2||',') ||
        decode(SPV.address_line3,null,'',SPV.address_line3||',')|| scy.name||','|| ss.name||','|| sc.name
        )else (SPV.address) end) end address
        from MM_MEM_SITE mms,SPM_LOCATION_V spv
        left outer join spm_country_tl sc
        on sc.lang = spv.lang and sc.country_code = spv.country_code
        left outer join spm_state_tl ss
        on ss.lang = spv.lang and ss.state_code = spv.state_code
        left outer join spm_city_tl scy
        on scy.lang = spv.lang and scy.city_code = spv.city_code
        WHERE MMS.LOCATION_ID = SPV.LOCATION_ID
        and mms.SITE_USE_CODE in ('BILL','SHIP','HOME','CTACT')
        and MEMBER_ID = (
        select MEMBER_ID from MM_MEMBER mm
        WHERE mm.member_code = #{memberCode, jdbcType=VARCHAR}
        and mm.MARKET_ID = #{request.marketId,jdbcType=DECIMAL}
        )
        and spv.LANG = #{request.locale,jdbcType=VARCHAR,javaType=java.lang.String}
    </select>
    <select id="selectMemberByMarketAndMemberCode" resultMap="BaseResultMap" parameterType="java.util.Map">
        select *
        from mm_member
        where market_id = (select market_id from spm_market_b where code = #{marketCode, jdbcType=VARCHAR})
        and member_code = #{memberCode, jdbcType=VARCHAR}
    </select>
    <select id="isAccessToFunctionByRole" resultType="java.lang.String">
        select 'Y'
        from dual
        where exists (select 'X'
        from sys_role_function srf, sys_function_b sfb
        where srf.function_id = sfb.function_id
        and srf.role_id = #{roleId,jdbcType=DECIMAL}
        and sfb.function_code = #{functionCode, jdbcType=VARCHAR})
    </select>
    <select id="isInMemtabAndMemOvertab" resultType="java.lang.String">
        select 'Y'
        from dual
        where (exists
        (select 'X' from mm_member mm where mm.member_code = #{memberCode, jdbcType=VARCHAR}))
        or (exists (select 'X' from mm_overseas_sponsor mos where mos.dealer_no = #{memberCode, jdbcType=VARCHAR}))
    </select>
    <select id="selectSalesOrganization" resultMap="BaseResultMap"
            parameterType="com.lkkhpg.dsis.common.member.dto.Member">
        SELECT
        s.SALES_ORG_ID,s.NAME
        FROM
        SPM_SALES_ORGANIZATION_B s
        WHERE
        s.NAME IN (
        SELECT
        M .SALES_ORGANIZATION
        FROM
        MM_MEMBER M
        WHERE
        M .MEMBER_ID = #{memberId,jdbcType=DECIMAL}
        )
    </select>


    <!--updated by 11816 at 2018/01/18 14:06-->
    <select id="calculateMemberCount" resultType="java.lang.Integer">
        select count(*) from mm_member where member_id = #{memberId, jdbcType=DECIMAL}
    </select>

    <!--updated by 11816 at 2018/01/18 14:06-->
    <update id="addNewDiscountAmt" parameterType="com.lkkhpg.dsis.common.member.dto.Member">
        update mm_member m set m.discount_amt = #{discountAmt, jdbcType = DECIMAL} where m.member_id = #{memberId, jdbcType=DECIMAL}
    </update>

    <update id="adjustDiscountAmtIn" parameterType="com.lkkhpg.dsis.common.member.dto.Member" >
        update mm_member m set m.discount_amt = m.discount_amt + (#{discountAmt, jdbcType = DECIMAL}) where m.member_id = #{memberId, jdbcType=DECIMAL}
    </update>

    <update id="adjustDiscountAmtOut" parameterType="com.lkkhpg.dsis.common.member.dto.Member" >
        update mm_member m set m.discount_amt = discount_amt - (#{discountAmt, jdbcType = DECIMAL}) where m.member_id = #{memberId, jdbcType=DECIMAL}
    </update>
    <update id="updateMemberDiscount">
        update mm_member m
        set m.discount_amt = #(discountAmt, jdbcType=DECIMAL)
        where m.member_id = #(memberId, jdbcType=DECIMAL);
    </update>

    <insert id="createAccount">
        <!--todo 2018/02/27-->
       <!-- insert into mm_member-->
    </insert>


    <select id="queryIfDiscountAmtIsNull" resultType = "java.lang.Long">
        select count(*) from mm_member where member_id = #{memberId, jdbcType = DECIMAL}  and discount_amt is null
    </select>


    <select id="queryCompanyIdByMemberId" resultType="java.lang.Long" parameterType="java.lang.Long">
        SELECT mm.COMPANY_ID from mm_member mm
        WHERE mm.MEMBER_ID = #{memberId, jdbcType = DECIMAL}
    </select>
    <!--用户所关联的销售组织对应的市场下的所有的会员 lov updated by 11816 at 2018/01/18 16:53-->
    <select id="queryMemberBelowMarketOfSals" resultMap="BaseResultMap">
        SELECT MEMBER_ID, MEMBER_CODE, CHINESE_FIRST_NAME
        FROM MM_MEMBER
        WHERE SALES_ORG_ID IN (
          SELECT SALES_ORG_ID
          FROM SPM_SALES_ORGANIZATION_B s
          WHERE s.SALES_ORG_ID IN (
            SELECT sura.ASSIGN_VALUE
            FROM SYS_USER_ROLE_ASSIGN sura LEFT OUTER JOIN SPM_SALES_ORGANIZATION_TL ssol
                ON (sura.ASSIGN_VALUE = ssol.SALES_ORG_ID AND ssol.LANG = 'zh_CN')
            WHERE sura.USER_ID = 1 AND sura.ROLE_ID = 1 AND sura.ASSIGN_TYPE = 'SALES'))
    </select>

    <select id="queryMemberForDiscountLov" resultMap="BaseResultMap">
        select member_id, member_code, chinese_firset_name
        from mm_member
        where market_id = #{request.marketId,jdbcType=DECIMAL}
    </select>


    <select id="queryMemberAndDiscountLov" resultMap="BaseResultMap">
        select member_id, member_code, chinese_first_name,  nvl(discount_amt,0) discountAmt
        from mm_member
        <where>
             market_id = #{request.marketId, jdbcType = DECIMAL}
            and discount is not null
            <if test="memberId != null">
                and member_id like concat('%',concat(#{memberId,jdbcType=DECIMAL},'%'))
            </if>
            <if test="memberCode != null">
                and member_code like concat('%',concat(#{memberCode, jdbcType=VARCHAR},'%'))
            </if>
            <if test="chineseFirstName != null">
                and chinese_first_name like concat('%',concat(#{chineseFirstName, jdbcType=VARCHAR},'%'))
            </if>
            <if test="salesOrgId != null">
                and sales_org_id= #{salesOrgId, jdbcType=DECIMAL}
            </if>
        </where>

    </select>

<select id="selectMember" resultMap="BaseResultMap"  parameterType="com.lkkhpg.dsis.common.member.dto.Member">
SELECT
	m .MEMBER_CODE,
	m .MARKET_ID,
	m.member_id
FROM
	MM_MEMBER m
WHERE
	m .MEMBER_ID IN (
		SELECT
			O.MEMBER_ID
		FROM
			OM_SALES_ORDER O
		WHERE
			O.ORDER_NUMBER = #{orderNumber,jdbcType=VARCHAR}
	)
</select>

    <select id="queryMarketIdAndCompanyIdByMemberId" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT
        mm.market_id,
        mm.company_id
        FROM mm_member mm
        WHERE mm.member_id = #{memberId, jdbcType = DECIMAL}
    </select>

    <select id="selectMemberByPhone" parameterType="com.lkkhpg.dsis.common.member.dto.Member" resultMap="BaseResultMap">
        SELECT m.MEMBER_CODE,
        m.member_id
        FROM
        MM_MEMBER m
        WHERE m.PHONE_NO = #{phoneNo} and m.SALES_ORG_ID = #{salesOrgId}
    </select>

    <!-- 根据会员表ID查询会员RemainingBalance -->
    <select id="queryRemBalByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        SELECT
        nvl(mm.remainingbalance,0) remainingBalance,
        (
        SELECT nvl(m.DISCOUNT_AMT, 0) - nvl(
        (
        SELECT sum(DISCOUNT_AMT)
        FROM OM_SALES_ORDER b
        WHERE MEMBER_ID = 61000041
        AND b.ORDER_STATUS IN ('SAV', 'WPAY', 'CHECK', 'PAYIN')), 0)
        FROM mm_member m
        WHERE m.member_id = mm.member_id) availableDiscount,
        nvl(mm.discount,0) discount
        FROM mm_member_v mm
        WHERE mm.member_id = #{memberId,jdbcType=DECIMAL}
    </select>


</mapper>